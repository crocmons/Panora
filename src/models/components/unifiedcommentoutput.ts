/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    UnifiedAttachmentOutput,
    UnifiedAttachmentOutput$inboundSchema,
    UnifiedAttachmentOutput$Outbound,
    UnifiedAttachmentOutput$outboundSchema,
} from "./unifiedattachmentoutput.js";
import * as z from "zod";

export type UnifiedCommentOutputRemoteData = {};

export type UnifiedCommentOutput = {
    /**
     * The body of the comment
     */
    body: string;
    /**
     * The html body of the comment
     */
    htmlBody?: string | undefined;
    /**
     * The public status of the comment
     */
    isPrivate?: boolean | undefined;
    /**
     * The creator type of the comment. Authorized values are either USER or CONTACT
     */
    creatorType?: string | undefined;
    /**
     * The uuid of the ticket the comment is tied to
     */
    ticketId?: string | undefined;
    /**
     * The uuid of the contact which the comment belongs to (if no user_id specified)
     */
    contactId?: string | undefined;
    /**
     * The uuid of the user which the comment belongs to (if no contact_id specified)
     */
    userId?: string | undefined;
    /**
     * The attachemnets tied to the comment
     */
    attachments?: Array<UnifiedAttachmentOutput> | undefined;
    /**
     * The uuid of the comment
     */
    id?: string | undefined;
    /**
     * The id of the comment in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedCommentOutputRemoteData;
};

/** @internal */
export const UnifiedCommentOutputRemoteData$inboundSchema: z.ZodType<
    UnifiedCommentOutputRemoteData,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedCommentOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedCommentOutputRemoteData$outboundSchema: z.ZodType<
    UnifiedCommentOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedCommentOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedCommentOutputRemoteData$ {
    /** @deprecated use `UnifiedCommentOutputRemoteData$inboundSchema` instead. */
    export const inboundSchema = UnifiedCommentOutputRemoteData$inboundSchema;
    /** @deprecated use `UnifiedCommentOutputRemoteData$outboundSchema` instead. */
    export const outboundSchema = UnifiedCommentOutputRemoteData$outboundSchema;
    /** @deprecated use `UnifiedCommentOutputRemoteData$Outbound` instead. */
    export type Outbound = UnifiedCommentOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedCommentOutput$inboundSchema: z.ZodType<
    UnifiedCommentOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        body: z.string(),
        html_body: z.string().optional(),
        is_private: z.boolean().optional(),
        creator_type: z.string().optional(),
        ticket_id: z.string().optional(),
        contact_id: z.string().optional(),
        user_id: z.string().optional(),
        attachments: z.array(UnifiedAttachmentOutput$inboundSchema).optional(),
        id: z.string().optional(),
        remote_id: z.string().optional(),
        remote_data: z.lazy(() => UnifiedCommentOutputRemoteData$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            html_body: "htmlBody",
            is_private: "isPrivate",
            creator_type: "creatorType",
            ticket_id: "ticketId",
            contact_id: "contactId",
            user_id: "userId",
            remote_id: "remoteId",
            remote_data: "remoteData",
        });
    });

/** @internal */
export type UnifiedCommentOutput$Outbound = {
    body: string;
    html_body?: string | undefined;
    is_private?: boolean | undefined;
    creator_type?: string | undefined;
    ticket_id?: string | undefined;
    contact_id?: string | undefined;
    user_id?: string | undefined;
    attachments?: Array<UnifiedAttachmentOutput$Outbound> | undefined;
    id?: string | undefined;
    remote_id?: string | undefined;
    remote_data: UnifiedCommentOutputRemoteData$Outbound;
};

/** @internal */
export const UnifiedCommentOutput$outboundSchema: z.ZodType<
    UnifiedCommentOutput$Outbound,
    z.ZodTypeDef,
    UnifiedCommentOutput
> = z
    .object({
        body: z.string(),
        htmlBody: z.string().optional(),
        isPrivate: z.boolean().optional(),
        creatorType: z.string().optional(),
        ticketId: z.string().optional(),
        contactId: z.string().optional(),
        userId: z.string().optional(),
        attachments: z.array(UnifiedAttachmentOutput$outboundSchema).optional(),
        id: z.string().optional(),
        remoteId: z.string().optional(),
        remoteData: z.lazy(() => UnifiedCommentOutputRemoteData$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            htmlBody: "html_body",
            isPrivate: "is_private",
            creatorType: "creator_type",
            ticketId: "ticket_id",
            contactId: "contact_id",
            userId: "user_id",
            remoteId: "remote_id",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedCommentOutput$ {
    /** @deprecated use `UnifiedCommentOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedCommentOutput$inboundSchema;
    /** @deprecated use `UnifiedCommentOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedCommentOutput$outboundSchema;
    /** @deprecated use `UnifiedCommentOutput$Outbound` instead. */
    export type Outbound = UnifiedCommentOutput$Outbound;
}
