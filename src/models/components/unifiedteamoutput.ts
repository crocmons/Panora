/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedTeamOutputFieldMappings = {};

export type UnifiedTeamOutputRemoteData = {};

export type UnifiedTeamOutput = {
    /**
     * The name of the team
     */
    name: string;
    /**
     * The description of the team
     */
    description?: string | undefined;
    fieldMappings: UnifiedTeamOutputFieldMappings;
    /**
     * The uuid of the team
     */
    id?: string | undefined;
    /**
     * The id of the team in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedTeamOutputRemoteData;
};

/** @internal */
export const UnifiedTeamOutputFieldMappings$inboundSchema: z.ZodType<
    UnifiedTeamOutputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedTeamOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedTeamOutputFieldMappings$outboundSchema: z.ZodType<
    UnifiedTeamOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedTeamOutputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedTeamOutputFieldMappings$ {
    /** @deprecated use `UnifiedTeamOutputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedTeamOutputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedTeamOutputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedTeamOutputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedTeamOutputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedTeamOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedTeamOutputRemoteData$inboundSchema: z.ZodType<
    UnifiedTeamOutputRemoteData,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedTeamOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedTeamOutputRemoteData$outboundSchema: z.ZodType<
    UnifiedTeamOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedTeamOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedTeamOutputRemoteData$ {
    /** @deprecated use `UnifiedTeamOutputRemoteData$inboundSchema` instead. */
    export const inboundSchema = UnifiedTeamOutputRemoteData$inboundSchema;
    /** @deprecated use `UnifiedTeamOutputRemoteData$outboundSchema` instead. */
    export const outboundSchema = UnifiedTeamOutputRemoteData$outboundSchema;
    /** @deprecated use `UnifiedTeamOutputRemoteData$Outbound` instead. */
    export type Outbound = UnifiedTeamOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedTeamOutput$inboundSchema: z.ZodType<UnifiedTeamOutput, z.ZodTypeDef, unknown> =
    z
        .object({
            name: z.string(),
            description: z.string().optional(),
            field_mappings: z.lazy(() => UnifiedTeamOutputFieldMappings$inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedTeamOutputRemoteData$inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
            });
        });

/** @internal */
export type UnifiedTeamOutput$Outbound = {
    name: string;
    description?: string | undefined;
    field_mappings: UnifiedTeamOutputFieldMappings$Outbound;
    id?: string | undefined;
    remote_id?: string | undefined;
    remote_data: UnifiedTeamOutputRemoteData$Outbound;
};

/** @internal */
export const UnifiedTeamOutput$outboundSchema: z.ZodType<
    UnifiedTeamOutput$Outbound,
    z.ZodTypeDef,
    UnifiedTeamOutput
> = z
    .object({
        name: z.string(),
        description: z.string().optional(),
        fieldMappings: z.lazy(() => UnifiedTeamOutputFieldMappings$outboundSchema),
        id: z.string().optional(),
        remoteId: z.string().optional(),
        remoteData: z.lazy(() => UnifiedTeamOutputRemoteData$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedTeamOutput$ {
    /** @deprecated use `UnifiedTeamOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedTeamOutput$inboundSchema;
    /** @deprecated use `UnifiedTeamOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedTeamOutput$outboundSchema;
    /** @deprecated use `UnifiedTeamOutput$Outbound` instead. */
    export type Outbound = UnifiedTeamOutput$Outbound;
}
