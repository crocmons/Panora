/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    UnifiedCommentInput,
    UnifiedCommentInput$inboundSchema,
    UnifiedCommentInput$Outbound,
    UnifiedCommentInput$outboundSchema,
} from "./unifiedcommentinput.js";
import * as z from "zod";

export type UnifiedTicketInputFieldMappings = {};

export type UnifiedTicketInput = {
    /**
     * The name of the ticket
     */
    name: string;
    /**
     * The status of the ticket. Authorized values are OPEN or CLOSED.
     */
    status?: string | undefined;
    /**
     * The description of the ticket
     */
    description: string;
    /**
     * The date the ticket is due
     */
    dueDate?: Date | undefined;
    /**
     * The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
     */
    type?: string | undefined;
    /**
     * The uuid of the parent ticket
     */
    parentTicket?: string | undefined;
    /**
     * The uuid of the collection (project) the ticket belongs to
     */
    projectId?: string | undefined;
    /**
     * The tags names of the ticket
     */
    tags?: Array<string> | undefined;
    /**
     * The date the ticket has been completed
     */
    completedAt?: Date | undefined;
    /**
     * The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
     */
    priority?: string | undefined;
    /**
     * The users uuids the ticket is assigned to
     */
    assignedTo?: Array<string> | undefined;
    /**
     * The comment of the ticket
     */
    comment?: UnifiedCommentInput | undefined;
    /**
     * The uuid of the account which the ticket belongs to
     */
    accountId?: string | undefined;
    /**
     * The uuid of the contact which the ticket belongs to
     */
    contactId?: string | undefined;
    fieldMappings: UnifiedTicketInputFieldMappings;
};

/** @internal */
export const UnifiedTicketInputFieldMappings$inboundSchema: z.ZodType<
    UnifiedTicketInputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedTicketInputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedTicketInputFieldMappings$outboundSchema: z.ZodType<
    UnifiedTicketInputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedTicketInputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedTicketInputFieldMappings$ {
    /** @deprecated use `UnifiedTicketInputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedTicketInputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedTicketInputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedTicketInputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedTicketInputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedTicketInputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedTicketInput$inboundSchema: z.ZodType<
    UnifiedTicketInput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.string(),
        status: z.string().optional(),
        description: z.string(),
        due_date: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        type: z.string().optional(),
        parent_ticket: z.string().optional(),
        project_id: z.string().optional(),
        tags: z.array(z.string()).optional(),
        completed_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        priority: z.string().optional(),
        assigned_to: z.array(z.string()).optional(),
        comment: UnifiedCommentInput$inboundSchema.optional(),
        account_id: z.string().optional(),
        contact_id: z.string().optional(),
        field_mappings: z.lazy(() => UnifiedTicketInputFieldMappings$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            due_date: "dueDate",
            parent_ticket: "parentTicket",
            project_id: "projectId",
            completed_at: "completedAt",
            assigned_to: "assignedTo",
            account_id: "accountId",
            contact_id: "contactId",
            field_mappings: "fieldMappings",
        });
    });

/** @internal */
export type UnifiedTicketInput$Outbound = {
    name: string;
    status?: string | undefined;
    description: string;
    due_date?: string | undefined;
    type?: string | undefined;
    parent_ticket?: string | undefined;
    project_id?: string | undefined;
    tags?: Array<string> | undefined;
    completed_at?: string | undefined;
    priority?: string | undefined;
    assigned_to?: Array<string> | undefined;
    comment?: UnifiedCommentInput$Outbound | undefined;
    account_id?: string | undefined;
    contact_id?: string | undefined;
    field_mappings: UnifiedTicketInputFieldMappings$Outbound;
};

/** @internal */
export const UnifiedTicketInput$outboundSchema: z.ZodType<
    UnifiedTicketInput$Outbound,
    z.ZodTypeDef,
    UnifiedTicketInput
> = z
    .object({
        name: z.string(),
        status: z.string().optional(),
        description: z.string(),
        dueDate: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        type: z.string().optional(),
        parentTicket: z.string().optional(),
        projectId: z.string().optional(),
        tags: z.array(z.string()).optional(),
        completedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        priority: z.string().optional(),
        assignedTo: z.array(z.string()).optional(),
        comment: UnifiedCommentInput$outboundSchema.optional(),
        accountId: z.string().optional(),
        contactId: z.string().optional(),
        fieldMappings: z.lazy(() => UnifiedTicketInputFieldMappings$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            dueDate: "due_date",
            parentTicket: "parent_ticket",
            projectId: "project_id",
            completedAt: "completed_at",
            assignedTo: "assigned_to",
            accountId: "account_id",
            contactId: "contact_id",
            fieldMappings: "field_mappings",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedTicketInput$ {
    /** @deprecated use `UnifiedTicketInput$inboundSchema` instead. */
    export const inboundSchema = UnifiedTicketInput$inboundSchema;
    /** @deprecated use `UnifiedTicketInput$outboundSchema` instead. */
    export const outboundSchema = UnifiedTicketInput$outboundSchema;
    /** @deprecated use `UnifiedTicketInput$Outbound` instead. */
    export type Outbound = UnifiedTicketInput$Outbound;
}
