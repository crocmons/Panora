/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedStageOutputFieldMappings = {};

export type UnifiedStageOutputRemoteData = {};

export type UnifiedStageOutput = {
    /**
     * The name of the stage
     */
    stageName: string;
    fieldMappings: UnifiedStageOutputFieldMappings;
    /**
     * The uuid of the stage
     */
    id?: string | undefined;
    /**
     * The id of the stage in the context of the Crm 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedStageOutputRemoteData;
};

/** @internal */
export const UnifiedStageOutputFieldMappings$inboundSchema: z.ZodType<
    UnifiedStageOutputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedStageOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedStageOutputFieldMappings$outboundSchema: z.ZodType<
    UnifiedStageOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedStageOutputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedStageOutputFieldMappings$ {
    /** @deprecated use `UnifiedStageOutputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedStageOutputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedStageOutputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedStageOutputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedStageOutputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedStageOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedStageOutputRemoteData$inboundSchema: z.ZodType<
    UnifiedStageOutputRemoteData,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedStageOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedStageOutputRemoteData$outboundSchema: z.ZodType<
    UnifiedStageOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedStageOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedStageOutputRemoteData$ {
    /** @deprecated use `UnifiedStageOutputRemoteData$inboundSchema` instead. */
    export const inboundSchema = UnifiedStageOutputRemoteData$inboundSchema;
    /** @deprecated use `UnifiedStageOutputRemoteData$outboundSchema` instead. */
    export const outboundSchema = UnifiedStageOutputRemoteData$outboundSchema;
    /** @deprecated use `UnifiedStageOutputRemoteData$Outbound` instead. */
    export type Outbound = UnifiedStageOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedStageOutput$inboundSchema: z.ZodType<
    UnifiedStageOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        stage_name: z.string(),
        field_mappings: z.lazy(() => UnifiedStageOutputFieldMappings$inboundSchema),
        id: z.string().optional(),
        remote_id: z.string().optional(),
        remote_data: z.lazy(() => UnifiedStageOutputRemoteData$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            stage_name: "stageName",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
        });
    });

/** @internal */
export type UnifiedStageOutput$Outbound = {
    stage_name: string;
    field_mappings: UnifiedStageOutputFieldMappings$Outbound;
    id?: string | undefined;
    remote_id?: string | undefined;
    remote_data: UnifiedStageOutputRemoteData$Outbound;
};

/** @internal */
export const UnifiedStageOutput$outboundSchema: z.ZodType<
    UnifiedStageOutput$Outbound,
    z.ZodTypeDef,
    UnifiedStageOutput
> = z
    .object({
        stageName: z.string(),
        fieldMappings: z.lazy(() => UnifiedStageOutputFieldMappings$outboundSchema),
        id: z.string().optional(),
        remoteId: z.string().optional(),
        remoteData: z.lazy(() => UnifiedStageOutputRemoteData$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            stageName: "stage_name",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedStageOutput$ {
    /** @deprecated use `UnifiedStageOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedStageOutput$inboundSchema;
    /** @deprecated use `UnifiedStageOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedStageOutput$outboundSchema;
    /** @deprecated use `UnifiedStageOutput$Outbound` instead. */
    export type Outbound = UnifiedStageOutput$Outbound;
}
