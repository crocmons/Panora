/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedNoteInputFieldMappings = {};

export type UnifiedNoteInput = {
    /**
     * The content of the note
     */
    content: string;
    /**
     * The uuid of the user tied the note
     */
    userId?: string | undefined;
    /**
     * The uuid of the company tied to the note
     */
    companyId?: string | undefined;
    /**
     * The uuid fo the contact tied to the note
     */
    contactId?: string | undefined;
    /**
     * The uuid of the deal tied to the note
     */
    dealId?: string | undefined;
    fieldMappings: UnifiedNoteInputFieldMappings;
};

/** @internal */
export const UnifiedNoteInputFieldMappings$inboundSchema: z.ZodType<
    UnifiedNoteInputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedNoteInputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedNoteInputFieldMappings$outboundSchema: z.ZodType<
    UnifiedNoteInputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedNoteInputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedNoteInputFieldMappings$ {
    /** @deprecated use `UnifiedNoteInputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedNoteInputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedNoteInputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedNoteInputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedNoteInputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedNoteInputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedNoteInput$inboundSchema: z.ZodType<UnifiedNoteInput, z.ZodTypeDef, unknown> = z
    .object({
        content: z.string(),
        user_id: z.string().optional(),
        company_id: z.string().optional(),
        contact_id: z.string().optional(),
        deal_id: z.string().optional(),
        field_mappings: z.lazy(() => UnifiedNoteInputFieldMappings$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            user_id: "userId",
            company_id: "companyId",
            contact_id: "contactId",
            deal_id: "dealId",
            field_mappings: "fieldMappings",
        });
    });

/** @internal */
export type UnifiedNoteInput$Outbound = {
    content: string;
    user_id?: string | undefined;
    company_id?: string | undefined;
    contact_id?: string | undefined;
    deal_id?: string | undefined;
    field_mappings: UnifiedNoteInputFieldMappings$Outbound;
};

/** @internal */
export const UnifiedNoteInput$outboundSchema: z.ZodType<
    UnifiedNoteInput$Outbound,
    z.ZodTypeDef,
    UnifiedNoteInput
> = z
    .object({
        content: z.string(),
        userId: z.string().optional(),
        companyId: z.string().optional(),
        contactId: z.string().optional(),
        dealId: z.string().optional(),
        fieldMappings: z.lazy(() => UnifiedNoteInputFieldMappings$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            userId: "user_id",
            companyId: "company_id",
            contactId: "contact_id",
            dealId: "deal_id",
            fieldMappings: "field_mappings",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedNoteInput$ {
    /** @deprecated use `UnifiedNoteInput$inboundSchema` instead. */
    export const inboundSchema = UnifiedNoteInput$inboundSchema;
    /** @deprecated use `UnifiedNoteInput$outboundSchema` instead. */
    export const outboundSchema = UnifiedNoteInput$outboundSchema;
    /** @deprecated use `UnifiedNoteInput$Outbound` instead. */
    export type Outbound = UnifiedNoteInput$Outbound;
}
