/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedTaskOutputFieldMappings = {};

export type UnifiedTaskOutputRemoteData = {};

export type UnifiedTaskOutput = {
    /**
     * The subject of the task
     */
    subject: string;
    /**
     * The content of the task
     */
    content: string;
    /**
     * The status of the task. Authorized values are PENDING, COMPLETED.
     */
    status: string;
    /**
     * The due date of the task
     */
    dueDate?: Date | undefined;
    /**
     * The finished date of the task
     */
    finishedDate?: Date | undefined;
    /**
     * The uuid of the user tied to the task
     */
    userId?: string | undefined;
    /**
     * The uuid fo the company tied to the task
     */
    companyId?: string | undefined;
    /**
     * The uuid of the deal tied to the task
     */
    dealId?: string | undefined;
    fieldMappings: UnifiedTaskOutputFieldMappings;
    /**
     * The uuid of the task
     */
    id?: string | undefined;
    /**
     * The id of the task in the context of the Crm 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedTaskOutputRemoteData;
};

/** @internal */
export const UnifiedTaskOutputFieldMappings$inboundSchema: z.ZodType<
    UnifiedTaskOutputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedTaskOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedTaskOutputFieldMappings$outboundSchema: z.ZodType<
    UnifiedTaskOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedTaskOutputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedTaskOutputFieldMappings$ {
    /** @deprecated use `UnifiedTaskOutputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedTaskOutputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedTaskOutputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedTaskOutputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedTaskOutputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedTaskOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedTaskOutputRemoteData$inboundSchema: z.ZodType<
    UnifiedTaskOutputRemoteData,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedTaskOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedTaskOutputRemoteData$outboundSchema: z.ZodType<
    UnifiedTaskOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedTaskOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedTaskOutputRemoteData$ {
    /** @deprecated use `UnifiedTaskOutputRemoteData$inboundSchema` instead. */
    export const inboundSchema = UnifiedTaskOutputRemoteData$inboundSchema;
    /** @deprecated use `UnifiedTaskOutputRemoteData$outboundSchema` instead. */
    export const outboundSchema = UnifiedTaskOutputRemoteData$outboundSchema;
    /** @deprecated use `UnifiedTaskOutputRemoteData$Outbound` instead. */
    export type Outbound = UnifiedTaskOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedTaskOutput$inboundSchema: z.ZodType<UnifiedTaskOutput, z.ZodTypeDef, unknown> =
    z
        .object({
            subject: z.string(),
            content: z.string(),
            status: z.string(),
            due_date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            finished_date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            user_id: z.string().optional(),
            company_id: z.string().optional(),
            deal_id: z.string().optional(),
            field_mappings: z.lazy(() => UnifiedTaskOutputFieldMappings$inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedTaskOutputRemoteData$inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                due_date: "dueDate",
                finished_date: "finishedDate",
                user_id: "userId",
                company_id: "companyId",
                deal_id: "dealId",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
            });
        });

/** @internal */
export type UnifiedTaskOutput$Outbound = {
    subject: string;
    content: string;
    status: string;
    due_date?: string | undefined;
    finished_date?: string | undefined;
    user_id?: string | undefined;
    company_id?: string | undefined;
    deal_id?: string | undefined;
    field_mappings: UnifiedTaskOutputFieldMappings$Outbound;
    id?: string | undefined;
    remote_id?: string | undefined;
    remote_data: UnifiedTaskOutputRemoteData$Outbound;
};

/** @internal */
export const UnifiedTaskOutput$outboundSchema: z.ZodType<
    UnifiedTaskOutput$Outbound,
    z.ZodTypeDef,
    UnifiedTaskOutput
> = z
    .object({
        subject: z.string(),
        content: z.string(),
        status: z.string(),
        dueDate: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        finishedDate: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        userId: z.string().optional(),
        companyId: z.string().optional(),
        dealId: z.string().optional(),
        fieldMappings: z.lazy(() => UnifiedTaskOutputFieldMappings$outboundSchema),
        id: z.string().optional(),
        remoteId: z.string().optional(),
        remoteData: z.lazy(() => UnifiedTaskOutputRemoteData$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            dueDate: "due_date",
            finishedDate: "finished_date",
            userId: "user_id",
            companyId: "company_id",
            dealId: "deal_id",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedTaskOutput$ {
    /** @deprecated use `UnifiedTaskOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedTaskOutput$inboundSchema;
    /** @deprecated use `UnifiedTaskOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedTaskOutput$outboundSchema;
    /** @deprecated use `UnifiedTaskOutput$Outbound` instead. */
    export type Outbound = UnifiedTaskOutput$Outbound;
}
