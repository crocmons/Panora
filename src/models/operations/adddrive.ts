/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddDriveRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Filestorage software.
     */
    remoteData?: boolean | undefined;
    unifiedDriveInput: components.UnifiedDriveInput;
};

export type AddDriveResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedDriveOutput | undefined;
};

export type AddDriveResponse = components.UnifiedDriveOutput | AddDriveResponseBody;

/** @internal */
export const AddDriveRequest$inboundSchema: z.ZodType<AddDriveRequest, z.ZodTypeDef, unknown> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedDriveInput: components.UnifiedDriveInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedDriveInput: "unifiedDriveInput",
        });
    });

/** @internal */
export type AddDriveRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedDriveInput: components.UnifiedDriveInput$Outbound;
};

/** @internal */
export const AddDriveRequest$outboundSchema: z.ZodType<
    AddDriveRequest$Outbound,
    z.ZodTypeDef,
    AddDriveRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedDriveInput: components.UnifiedDriveInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedDriveInput: "UnifiedDriveInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddDriveRequest$ {
    /** @deprecated use `AddDriveRequest$inboundSchema` instead. */
    export const inboundSchema = AddDriveRequest$inboundSchema;
    /** @deprecated use `AddDriveRequest$outboundSchema` instead. */
    export const outboundSchema = AddDriveRequest$outboundSchema;
    /** @deprecated use `AddDriveRequest$Outbound` instead. */
    export type Outbound = AddDriveRequest$Outbound;
}

/** @internal */
export const AddDriveResponseBody$inboundSchema: z.ZodType<
    AddDriveResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedDriveOutput$inboundSchema.optional(),
});

/** @internal */
export type AddDriveResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedDriveOutput$Outbound | undefined;
};

/** @internal */
export const AddDriveResponseBody$outboundSchema: z.ZodType<
    AddDriveResponseBody$Outbound,
    z.ZodTypeDef,
    AddDriveResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedDriveOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddDriveResponseBody$ {
    /** @deprecated use `AddDriveResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddDriveResponseBody$inboundSchema;
    /** @deprecated use `AddDriveResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddDriveResponseBody$outboundSchema;
    /** @deprecated use `AddDriveResponseBody$Outbound` instead. */
    export type Outbound = AddDriveResponseBody$Outbound;
}

/** @internal */
export const AddDriveResponse$inboundSchema: z.ZodType<AddDriveResponse, z.ZodTypeDef, unknown> =
    z.union([
        components.UnifiedDriveOutput$inboundSchema,
        z.lazy(() => AddDriveResponseBody$inboundSchema),
    ]);

/** @internal */
export type AddDriveResponse$Outbound =
    | components.UnifiedDriveOutput$Outbound
    | AddDriveResponseBody$Outbound;

/** @internal */
export const AddDriveResponse$outboundSchema: z.ZodType<
    AddDriveResponse$Outbound,
    z.ZodTypeDef,
    AddDriveResponse
> = z.union([
    components.UnifiedDriveOutput$outboundSchema,
    z.lazy(() => AddDriveResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddDriveResponse$ {
    /** @deprecated use `AddDriveResponse$inboundSchema` instead. */
    export const inboundSchema = AddDriveResponse$inboundSchema;
    /** @deprecated use `AddDriveResponse$outboundSchema` instead. */
    export const outboundSchema = AddDriveResponse$outboundSchema;
    /** @deprecated use `AddDriveResponse$Outbound` instead. */
    export type Outbound = AddDriveResponse$Outbound;
}
