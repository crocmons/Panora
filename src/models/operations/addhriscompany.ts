/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddHrisCompanyRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Hris software.
     */
    remoteData?: boolean | undefined;
    unifiedCompanyInput: components.UnifiedCompanyInput;
};

export type AddHrisCompanyResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCompanyOutput | undefined;
};

export type AddHrisCompanyResponse = components.UnifiedCompanyOutput | AddHrisCompanyResponseBody;

/** @internal */
export const AddHrisCompanyRequest$inboundSchema: z.ZodType<
    AddHrisCompanyRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedCompanyInput: components.UnifiedCompanyInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedCompanyInput: "unifiedCompanyInput",
        });
    });

/** @internal */
export type AddHrisCompanyRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedCompanyInput: components.UnifiedCompanyInput$Outbound;
};

/** @internal */
export const AddHrisCompanyRequest$outboundSchema: z.ZodType<
    AddHrisCompanyRequest$Outbound,
    z.ZodTypeDef,
    AddHrisCompanyRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedCompanyInput: components.UnifiedCompanyInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedCompanyInput: "UnifiedCompanyInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddHrisCompanyRequest$ {
    /** @deprecated use `AddHrisCompanyRequest$inboundSchema` instead. */
    export const inboundSchema = AddHrisCompanyRequest$inboundSchema;
    /** @deprecated use `AddHrisCompanyRequest$outboundSchema` instead. */
    export const outboundSchema = AddHrisCompanyRequest$outboundSchema;
    /** @deprecated use `AddHrisCompanyRequest$Outbound` instead. */
    export type Outbound = AddHrisCompanyRequest$Outbound;
}

/** @internal */
export const AddHrisCompanyResponseBody$inboundSchema: z.ZodType<
    AddHrisCompanyResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCompanyOutput$inboundSchema.optional(),
});

/** @internal */
export type AddHrisCompanyResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCompanyOutput$Outbound | undefined;
};

/** @internal */
export const AddHrisCompanyResponseBody$outboundSchema: z.ZodType<
    AddHrisCompanyResponseBody$Outbound,
    z.ZodTypeDef,
    AddHrisCompanyResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCompanyOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddHrisCompanyResponseBody$ {
    /** @deprecated use `AddHrisCompanyResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddHrisCompanyResponseBody$inboundSchema;
    /** @deprecated use `AddHrisCompanyResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddHrisCompanyResponseBody$outboundSchema;
    /** @deprecated use `AddHrisCompanyResponseBody$Outbound` instead. */
    export type Outbound = AddHrisCompanyResponseBody$Outbound;
}

/** @internal */
export const AddHrisCompanyResponse$inboundSchema: z.ZodType<
    AddHrisCompanyResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedCompanyOutput$inboundSchema,
    z.lazy(() => AddHrisCompanyResponseBody$inboundSchema),
]);

/** @internal */
export type AddHrisCompanyResponse$Outbound =
    | components.UnifiedCompanyOutput$Outbound
    | AddHrisCompanyResponseBody$Outbound;

/** @internal */
export const AddHrisCompanyResponse$outboundSchema: z.ZodType<
    AddHrisCompanyResponse$Outbound,
    z.ZodTypeDef,
    AddHrisCompanyResponse
> = z.union([
    components.UnifiedCompanyOutput$outboundSchema,
    z.lazy(() => AddHrisCompanyResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddHrisCompanyResponse$ {
    /** @deprecated use `AddHrisCompanyResponse$inboundSchema` instead. */
    export const inboundSchema = AddHrisCompanyResponse$inboundSchema;
    /** @deprecated use `AddHrisCompanyResponse$outboundSchema` instead. */
    export const outboundSchema = AddHrisCompanyResponse$outboundSchema;
    /** @deprecated use `AddHrisCompanyResponse$Outbound` instead. */
    export type Outbound = AddHrisCompanyResponse$Outbound;
}
