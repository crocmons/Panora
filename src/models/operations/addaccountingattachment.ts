/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddAccountingAttachmentRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
    unifiedAttachmentInput: components.UnifiedAttachmentInput;
};

export type AddAccountingAttachmentResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedAttachmentOutput | undefined;
};

export type AddAccountingAttachmentResponse =
    | AddAccountingAttachmentResponseBody
    | components.UnifiedAttachmentOutput;

/** @internal */
export const AddAccountingAttachmentRequest$inboundSchema: z.ZodType<
    AddAccountingAttachmentRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedAttachmentInput: components.UnifiedAttachmentInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedAttachmentInput: "unifiedAttachmentInput",
        });
    });

/** @internal */
export type AddAccountingAttachmentRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedAttachmentInput: components.UnifiedAttachmentInput$Outbound;
};

/** @internal */
export const AddAccountingAttachmentRequest$outboundSchema: z.ZodType<
    AddAccountingAttachmentRequest$Outbound,
    z.ZodTypeDef,
    AddAccountingAttachmentRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedAttachmentInput: components.UnifiedAttachmentInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedAttachmentInput: "UnifiedAttachmentInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddAccountingAttachmentRequest$ {
    /** @deprecated use `AddAccountingAttachmentRequest$inboundSchema` instead. */
    export const inboundSchema = AddAccountingAttachmentRequest$inboundSchema;
    /** @deprecated use `AddAccountingAttachmentRequest$outboundSchema` instead. */
    export const outboundSchema = AddAccountingAttachmentRequest$outboundSchema;
    /** @deprecated use `AddAccountingAttachmentRequest$Outbound` instead. */
    export type Outbound = AddAccountingAttachmentRequest$Outbound;
}

/** @internal */
export const AddAccountingAttachmentResponseBody$inboundSchema: z.ZodType<
    AddAccountingAttachmentResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedAttachmentOutput$inboundSchema.optional(),
});

/** @internal */
export type AddAccountingAttachmentResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedAttachmentOutput$Outbound | undefined;
};

/** @internal */
export const AddAccountingAttachmentResponseBody$outboundSchema: z.ZodType<
    AddAccountingAttachmentResponseBody$Outbound,
    z.ZodTypeDef,
    AddAccountingAttachmentResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedAttachmentOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddAccountingAttachmentResponseBody$ {
    /** @deprecated use `AddAccountingAttachmentResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddAccountingAttachmentResponseBody$inboundSchema;
    /** @deprecated use `AddAccountingAttachmentResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddAccountingAttachmentResponseBody$outboundSchema;
    /** @deprecated use `AddAccountingAttachmentResponseBody$Outbound` instead. */
    export type Outbound = AddAccountingAttachmentResponseBody$Outbound;
}

/** @internal */
export const AddAccountingAttachmentResponse$inboundSchema: z.ZodType<
    AddAccountingAttachmentResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => AddAccountingAttachmentResponseBody$inboundSchema),
    components.UnifiedAttachmentOutput$inboundSchema,
]);

/** @internal */
export type AddAccountingAttachmentResponse$Outbound =
    | AddAccountingAttachmentResponseBody$Outbound
    | components.UnifiedAttachmentOutput$Outbound;

/** @internal */
export const AddAccountingAttachmentResponse$outboundSchema: z.ZodType<
    AddAccountingAttachmentResponse$Outbound,
    z.ZodTypeDef,
    AddAccountingAttachmentResponse
> = z.union([
    z.lazy(() => AddAccountingAttachmentResponseBody$outboundSchema),
    components.UnifiedAttachmentOutput$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddAccountingAttachmentResponse$ {
    /** @deprecated use `AddAccountingAttachmentResponse$inboundSchema` instead. */
    export const inboundSchema = AddAccountingAttachmentResponse$inboundSchema;
    /** @deprecated use `AddAccountingAttachmentResponse$outboundSchema` instead. */
    export const outboundSchema = AddAccountingAttachmentResponse$outboundSchema;
    /** @deprecated use `AddAccountingAttachmentResponse$Outbound` instead. */
    export type Outbound = AddAccountingAttachmentResponse$Outbound;
}
