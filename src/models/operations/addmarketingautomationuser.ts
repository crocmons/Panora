/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddMarketingAutomationUserRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Marketingautomation software.
     */
    remoteData?: boolean | undefined;
    unifiedUserInput: components.UnifiedUserInput;
};

export type AddMarketingAutomationUserResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedUserOutput | undefined;
};

export type AddMarketingAutomationUserResponse =
    | components.UnifiedUserOutput
    | AddMarketingAutomationUserResponseBody;

/** @internal */
export const AddMarketingAutomationUserRequest$inboundSchema: z.ZodType<
    AddMarketingAutomationUserRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedUserInput: components.UnifiedUserInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedUserInput: "unifiedUserInput",
        });
    });

/** @internal */
export type AddMarketingAutomationUserRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedUserInput: components.UnifiedUserInput$Outbound;
};

/** @internal */
export const AddMarketingAutomationUserRequest$outboundSchema: z.ZodType<
    AddMarketingAutomationUserRequest$Outbound,
    z.ZodTypeDef,
    AddMarketingAutomationUserRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedUserInput: components.UnifiedUserInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedUserInput: "UnifiedUserInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddMarketingAutomationUserRequest$ {
    /** @deprecated use `AddMarketingAutomationUserRequest$inboundSchema` instead. */
    export const inboundSchema = AddMarketingAutomationUserRequest$inboundSchema;
    /** @deprecated use `AddMarketingAutomationUserRequest$outboundSchema` instead. */
    export const outboundSchema = AddMarketingAutomationUserRequest$outboundSchema;
    /** @deprecated use `AddMarketingAutomationUserRequest$Outbound` instead. */
    export type Outbound = AddMarketingAutomationUserRequest$Outbound;
}

/** @internal */
export const AddMarketingAutomationUserResponseBody$inboundSchema: z.ZodType<
    AddMarketingAutomationUserResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedUserOutput$inboundSchema.optional(),
});

/** @internal */
export type AddMarketingAutomationUserResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedUserOutput$Outbound | undefined;
};

/** @internal */
export const AddMarketingAutomationUserResponseBody$outboundSchema: z.ZodType<
    AddMarketingAutomationUserResponseBody$Outbound,
    z.ZodTypeDef,
    AddMarketingAutomationUserResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedUserOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddMarketingAutomationUserResponseBody$ {
    /** @deprecated use `AddMarketingAutomationUserResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddMarketingAutomationUserResponseBody$inboundSchema;
    /** @deprecated use `AddMarketingAutomationUserResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddMarketingAutomationUserResponseBody$outboundSchema;
    /** @deprecated use `AddMarketingAutomationUserResponseBody$Outbound` instead. */
    export type Outbound = AddMarketingAutomationUserResponseBody$Outbound;
}

/** @internal */
export const AddMarketingAutomationUserResponse$inboundSchema: z.ZodType<
    AddMarketingAutomationUserResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedUserOutput$inboundSchema,
    z.lazy(() => AddMarketingAutomationUserResponseBody$inboundSchema),
]);

/** @internal */
export type AddMarketingAutomationUserResponse$Outbound =
    | components.UnifiedUserOutput$Outbound
    | AddMarketingAutomationUserResponseBody$Outbound;

/** @internal */
export const AddMarketingAutomationUserResponse$outboundSchema: z.ZodType<
    AddMarketingAutomationUserResponse$Outbound,
    z.ZodTypeDef,
    AddMarketingAutomationUserResponse
> = z.union([
    components.UnifiedUserOutput$outboundSchema,
    z.lazy(() => AddMarketingAutomationUserResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddMarketingAutomationUserResponse$ {
    /** @deprecated use `AddMarketingAutomationUserResponse$inboundSchema` instead. */
    export const inboundSchema = AddMarketingAutomationUserResponse$inboundSchema;
    /** @deprecated use `AddMarketingAutomationUserResponse$outboundSchema` instead. */
    export const outboundSchema = AddMarketingAutomationUserResponse$outboundSchema;
    /** @deprecated use `AddMarketingAutomationUserResponse$Outbound` instead. */
    export type Outbound = AddMarketingAutomationUserResponse$Outbound;
}
