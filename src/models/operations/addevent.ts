/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddEventRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Marketingautomation software.
     */
    remoteData?: boolean | undefined;
    unifiedEventInput: components.UnifiedEventInput;
};

export type AddEventResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedEventOutput | undefined;
};

export type AddEventResponse = components.UnifiedEventOutput | AddEventResponseBody;

/** @internal */
export const AddEventRequest$inboundSchema: z.ZodType<AddEventRequest, z.ZodTypeDef, unknown> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedEventInput: components.UnifiedEventInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedEventInput: "unifiedEventInput",
        });
    });

/** @internal */
export type AddEventRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedEventInput: components.UnifiedEventInput$Outbound;
};

/** @internal */
export const AddEventRequest$outboundSchema: z.ZodType<
    AddEventRequest$Outbound,
    z.ZodTypeDef,
    AddEventRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedEventInput: components.UnifiedEventInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedEventInput: "UnifiedEventInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEventRequest$ {
    /** @deprecated use `AddEventRequest$inboundSchema` instead. */
    export const inboundSchema = AddEventRequest$inboundSchema;
    /** @deprecated use `AddEventRequest$outboundSchema` instead. */
    export const outboundSchema = AddEventRequest$outboundSchema;
    /** @deprecated use `AddEventRequest$Outbound` instead. */
    export type Outbound = AddEventRequest$Outbound;
}

/** @internal */
export const AddEventResponseBody$inboundSchema: z.ZodType<
    AddEventResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedEventOutput$inboundSchema.optional(),
});

/** @internal */
export type AddEventResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedEventOutput$Outbound | undefined;
};

/** @internal */
export const AddEventResponseBody$outboundSchema: z.ZodType<
    AddEventResponseBody$Outbound,
    z.ZodTypeDef,
    AddEventResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedEventOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEventResponseBody$ {
    /** @deprecated use `AddEventResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddEventResponseBody$inboundSchema;
    /** @deprecated use `AddEventResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddEventResponseBody$outboundSchema;
    /** @deprecated use `AddEventResponseBody$Outbound` instead. */
    export type Outbound = AddEventResponseBody$Outbound;
}

/** @internal */
export const AddEventResponse$inboundSchema: z.ZodType<AddEventResponse, z.ZodTypeDef, unknown> =
    z.union([
        components.UnifiedEventOutput$inboundSchema,
        z.lazy(() => AddEventResponseBody$inboundSchema),
    ]);

/** @internal */
export type AddEventResponse$Outbound =
    | components.UnifiedEventOutput$Outbound
    | AddEventResponseBody$Outbound;

/** @internal */
export const AddEventResponse$outboundSchema: z.ZodType<
    AddEventResponse$Outbound,
    z.ZodTypeDef,
    AddEventResponse
> = z.union([
    components.UnifiedEventOutput$outboundSchema,
    z.lazy(() => AddEventResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEventResponse$ {
    /** @deprecated use `AddEventResponse$inboundSchema` instead. */
    export const inboundSchema = AddEventResponse$inboundSchema;
    /** @deprecated use `AddEventResponse$outboundSchema` instead. */
    export const outboundSchema = AddEventResponse$outboundSchema;
    /** @deprecated use `AddEventResponse$Outbound` instead. */
    export type Outbound = AddEventResponse$Outbound;
}
