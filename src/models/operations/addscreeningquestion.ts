/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddScreeningQuestionRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Ats software.
     */
    remoteData?: boolean | undefined;
    unifiedScreeningQuestionInput: components.UnifiedScreeningQuestionInput;
};

export type AddScreeningQuestionResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedScreeningQuestionOutput | undefined;
};

export type AddScreeningQuestionResponse =
    | components.UnifiedScreeningQuestionOutput
    | AddScreeningQuestionResponseBody;

/** @internal */
export const AddScreeningQuestionRequest$inboundSchema: z.ZodType<
    AddScreeningQuestionRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedScreeningQuestionInput: components.UnifiedScreeningQuestionInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedScreeningQuestionInput: "unifiedScreeningQuestionInput",
        });
    });

/** @internal */
export type AddScreeningQuestionRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedScreeningQuestionInput: components.UnifiedScreeningQuestionInput$Outbound;
};

/** @internal */
export const AddScreeningQuestionRequest$outboundSchema: z.ZodType<
    AddScreeningQuestionRequest$Outbound,
    z.ZodTypeDef,
    AddScreeningQuestionRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedScreeningQuestionInput: components.UnifiedScreeningQuestionInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedScreeningQuestionInput: "UnifiedScreeningQuestionInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddScreeningQuestionRequest$ {
    /** @deprecated use `AddScreeningQuestionRequest$inboundSchema` instead. */
    export const inboundSchema = AddScreeningQuestionRequest$inboundSchema;
    /** @deprecated use `AddScreeningQuestionRequest$outboundSchema` instead. */
    export const outboundSchema = AddScreeningQuestionRequest$outboundSchema;
    /** @deprecated use `AddScreeningQuestionRequest$Outbound` instead. */
    export type Outbound = AddScreeningQuestionRequest$Outbound;
}

/** @internal */
export const AddScreeningQuestionResponseBody$inboundSchema: z.ZodType<
    AddScreeningQuestionResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedScreeningQuestionOutput$inboundSchema.optional(),
});

/** @internal */
export type AddScreeningQuestionResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedScreeningQuestionOutput$Outbound | undefined;
};

/** @internal */
export const AddScreeningQuestionResponseBody$outboundSchema: z.ZodType<
    AddScreeningQuestionResponseBody$Outbound,
    z.ZodTypeDef,
    AddScreeningQuestionResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedScreeningQuestionOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddScreeningQuestionResponseBody$ {
    /** @deprecated use `AddScreeningQuestionResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddScreeningQuestionResponseBody$inboundSchema;
    /** @deprecated use `AddScreeningQuestionResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddScreeningQuestionResponseBody$outboundSchema;
    /** @deprecated use `AddScreeningQuestionResponseBody$Outbound` instead. */
    export type Outbound = AddScreeningQuestionResponseBody$Outbound;
}

/** @internal */
export const AddScreeningQuestionResponse$inboundSchema: z.ZodType<
    AddScreeningQuestionResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedScreeningQuestionOutput$inboundSchema,
    z.lazy(() => AddScreeningQuestionResponseBody$inboundSchema),
]);

/** @internal */
export type AddScreeningQuestionResponse$Outbound =
    | components.UnifiedScreeningQuestionOutput$Outbound
    | AddScreeningQuestionResponseBody$Outbound;

/** @internal */
export const AddScreeningQuestionResponse$outboundSchema: z.ZodType<
    AddScreeningQuestionResponse$Outbound,
    z.ZodTypeDef,
    AddScreeningQuestionResponse
> = z.union([
    components.UnifiedScreeningQuestionOutput$outboundSchema,
    z.lazy(() => AddScreeningQuestionResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddScreeningQuestionResponse$ {
    /** @deprecated use `AddScreeningQuestionResponse$inboundSchema` instead. */
    export const inboundSchema = AddScreeningQuestionResponse$inboundSchema;
    /** @deprecated use `AddScreeningQuestionResponse$outboundSchema` instead. */
    export const outboundSchema = AddScreeningQuestionResponse$outboundSchema;
    /** @deprecated use `AddScreeningQuestionResponse$Outbound` instead. */
    export type Outbound = AddScreeningQuestionResponse$Outbound;
}
