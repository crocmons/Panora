/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddExpenseRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
    unifiedExpenseInput: components.UnifiedExpenseInput;
};

export type AddExpenseResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedExpenseOutput | undefined;
};

export type AddExpenseResponse = components.UnifiedExpenseOutput | AddExpenseResponseBody;

/** @internal */
export const AddExpenseRequest$inboundSchema: z.ZodType<AddExpenseRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedExpenseInput: components.UnifiedExpenseInput$inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedExpenseInput: "unifiedExpenseInput",
            });
        });

/** @internal */
export type AddExpenseRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedExpenseInput: components.UnifiedExpenseInput$Outbound;
};

/** @internal */
export const AddExpenseRequest$outboundSchema: z.ZodType<
    AddExpenseRequest$Outbound,
    z.ZodTypeDef,
    AddExpenseRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedExpenseInput: components.UnifiedExpenseInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedExpenseInput: "UnifiedExpenseInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddExpenseRequest$ {
    /** @deprecated use `AddExpenseRequest$inboundSchema` instead. */
    export const inboundSchema = AddExpenseRequest$inboundSchema;
    /** @deprecated use `AddExpenseRequest$outboundSchema` instead. */
    export const outboundSchema = AddExpenseRequest$outboundSchema;
    /** @deprecated use `AddExpenseRequest$Outbound` instead. */
    export type Outbound = AddExpenseRequest$Outbound;
}

/** @internal */
export const AddExpenseResponseBody$inboundSchema: z.ZodType<
    AddExpenseResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedExpenseOutput$inboundSchema.optional(),
});

/** @internal */
export type AddExpenseResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedExpenseOutput$Outbound | undefined;
};

/** @internal */
export const AddExpenseResponseBody$outboundSchema: z.ZodType<
    AddExpenseResponseBody$Outbound,
    z.ZodTypeDef,
    AddExpenseResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedExpenseOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddExpenseResponseBody$ {
    /** @deprecated use `AddExpenseResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddExpenseResponseBody$inboundSchema;
    /** @deprecated use `AddExpenseResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddExpenseResponseBody$outboundSchema;
    /** @deprecated use `AddExpenseResponseBody$Outbound` instead. */
    export type Outbound = AddExpenseResponseBody$Outbound;
}

/** @internal */
export const AddExpenseResponse$inboundSchema: z.ZodType<
    AddExpenseResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedExpenseOutput$inboundSchema,
    z.lazy(() => AddExpenseResponseBody$inboundSchema),
]);

/** @internal */
export type AddExpenseResponse$Outbound =
    | components.UnifiedExpenseOutput$Outbound
    | AddExpenseResponseBody$Outbound;

/** @internal */
export const AddExpenseResponse$outboundSchema: z.ZodType<
    AddExpenseResponse$Outbound,
    z.ZodTypeDef,
    AddExpenseResponse
> = z.union([
    components.UnifiedExpenseOutput$outboundSchema,
    z.lazy(() => AddExpenseResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddExpenseResponse$ {
    /** @deprecated use `AddExpenseResponse$inboundSchema` instead. */
    export const inboundSchema = AddExpenseResponse$inboundSchema;
    /** @deprecated use `AddExpenseResponse$outboundSchema` instead. */
    export const outboundSchema = AddExpenseResponse$outboundSchema;
    /** @deprecated use `AddExpenseResponse$Outbound` instead. */
    export type Outbound = AddExpenseResponse$Outbound;
}
