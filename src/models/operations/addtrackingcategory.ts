/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddTrackingCategoryRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
    unifiedTrackingCategoryInput: components.UnifiedTrackingCategoryInput;
};

export type AddTrackingCategoryResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedTrackingCategoryOutput | undefined;
};

export type AddTrackingCategoryResponse =
    | components.UnifiedTrackingCategoryOutput
    | AddTrackingCategoryResponseBody;

/** @internal */
export const AddTrackingCategoryRequest$inboundSchema: z.ZodType<
    AddTrackingCategoryRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedTrackingCategoryInput: components.UnifiedTrackingCategoryInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedTrackingCategoryInput: "unifiedTrackingCategoryInput",
        });
    });

/** @internal */
export type AddTrackingCategoryRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedTrackingCategoryInput: components.UnifiedTrackingCategoryInput$Outbound;
};

/** @internal */
export const AddTrackingCategoryRequest$outboundSchema: z.ZodType<
    AddTrackingCategoryRequest$Outbound,
    z.ZodTypeDef,
    AddTrackingCategoryRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedTrackingCategoryInput: components.UnifiedTrackingCategoryInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedTrackingCategoryInput: "UnifiedTrackingCategoryInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTrackingCategoryRequest$ {
    /** @deprecated use `AddTrackingCategoryRequest$inboundSchema` instead. */
    export const inboundSchema = AddTrackingCategoryRequest$inboundSchema;
    /** @deprecated use `AddTrackingCategoryRequest$outboundSchema` instead. */
    export const outboundSchema = AddTrackingCategoryRequest$outboundSchema;
    /** @deprecated use `AddTrackingCategoryRequest$Outbound` instead. */
    export type Outbound = AddTrackingCategoryRequest$Outbound;
}

/** @internal */
export const AddTrackingCategoryResponseBody$inboundSchema: z.ZodType<
    AddTrackingCategoryResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedTrackingCategoryOutput$inboundSchema.optional(),
});

/** @internal */
export type AddTrackingCategoryResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedTrackingCategoryOutput$Outbound | undefined;
};

/** @internal */
export const AddTrackingCategoryResponseBody$outboundSchema: z.ZodType<
    AddTrackingCategoryResponseBody$Outbound,
    z.ZodTypeDef,
    AddTrackingCategoryResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedTrackingCategoryOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTrackingCategoryResponseBody$ {
    /** @deprecated use `AddTrackingCategoryResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddTrackingCategoryResponseBody$inboundSchema;
    /** @deprecated use `AddTrackingCategoryResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddTrackingCategoryResponseBody$outboundSchema;
    /** @deprecated use `AddTrackingCategoryResponseBody$Outbound` instead. */
    export type Outbound = AddTrackingCategoryResponseBody$Outbound;
}

/** @internal */
export const AddTrackingCategoryResponse$inboundSchema: z.ZodType<
    AddTrackingCategoryResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedTrackingCategoryOutput$inboundSchema,
    z.lazy(() => AddTrackingCategoryResponseBody$inboundSchema),
]);

/** @internal */
export type AddTrackingCategoryResponse$Outbound =
    | components.UnifiedTrackingCategoryOutput$Outbound
    | AddTrackingCategoryResponseBody$Outbound;

/** @internal */
export const AddTrackingCategoryResponse$outboundSchema: z.ZodType<
    AddTrackingCategoryResponse$Outbound,
    z.ZodTypeDef,
    AddTrackingCategoryResponse
> = z.union([
    components.UnifiedTrackingCategoryOutput$outboundSchema,
    z.lazy(() => AddTrackingCategoryResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTrackingCategoryResponse$ {
    /** @deprecated use `AddTrackingCategoryResponse$inboundSchema` instead. */
    export const inboundSchema = AddTrackingCategoryResponse$inboundSchema;
    /** @deprecated use `AddTrackingCategoryResponse$outboundSchema` instead. */
    export const outboundSchema = AddTrackingCategoryResponse$outboundSchema;
    /** @deprecated use `AddTrackingCategoryResponse$Outbound` instead. */
    export type Outbound = AddTrackingCategoryResponse$Outbound;
}
