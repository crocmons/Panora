/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddGroupRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Hris software.
     */
    remoteData?: boolean | undefined;
    unifiedGroupInput: components.UnifiedGroupInput;
};

export type AddGroupResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedGroupOutput | undefined;
};

export type AddGroupResponse = components.UnifiedGroupOutput | AddGroupResponseBody;

/** @internal */
export const AddGroupRequest$inboundSchema: z.ZodType<AddGroupRequest, z.ZodTypeDef, unknown> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedGroupInput: components.UnifiedGroupInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedGroupInput: "unifiedGroupInput",
        });
    });

/** @internal */
export type AddGroupRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedGroupInput: components.UnifiedGroupInput$Outbound;
};

/** @internal */
export const AddGroupRequest$outboundSchema: z.ZodType<
    AddGroupRequest$Outbound,
    z.ZodTypeDef,
    AddGroupRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedGroupInput: components.UnifiedGroupInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedGroupInput: "UnifiedGroupInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddGroupRequest$ {
    /** @deprecated use `AddGroupRequest$inboundSchema` instead. */
    export const inboundSchema = AddGroupRequest$inboundSchema;
    /** @deprecated use `AddGroupRequest$outboundSchema` instead. */
    export const outboundSchema = AddGroupRequest$outboundSchema;
    /** @deprecated use `AddGroupRequest$Outbound` instead. */
    export type Outbound = AddGroupRequest$Outbound;
}

/** @internal */
export const AddGroupResponseBody$inboundSchema: z.ZodType<
    AddGroupResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedGroupOutput$inboundSchema.optional(),
});

/** @internal */
export type AddGroupResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedGroupOutput$Outbound | undefined;
};

/** @internal */
export const AddGroupResponseBody$outboundSchema: z.ZodType<
    AddGroupResponseBody$Outbound,
    z.ZodTypeDef,
    AddGroupResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedGroupOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddGroupResponseBody$ {
    /** @deprecated use `AddGroupResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddGroupResponseBody$inboundSchema;
    /** @deprecated use `AddGroupResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddGroupResponseBody$outboundSchema;
    /** @deprecated use `AddGroupResponseBody$Outbound` instead. */
    export type Outbound = AddGroupResponseBody$Outbound;
}

/** @internal */
export const AddGroupResponse$inboundSchema: z.ZodType<AddGroupResponse, z.ZodTypeDef, unknown> =
    z.union([
        components.UnifiedGroupOutput$inboundSchema,
        z.lazy(() => AddGroupResponseBody$inboundSchema),
    ]);

/** @internal */
export type AddGroupResponse$Outbound =
    | components.UnifiedGroupOutput$Outbound
    | AddGroupResponseBody$Outbound;

/** @internal */
export const AddGroupResponse$outboundSchema: z.ZodType<
    AddGroupResponse$Outbound,
    z.ZodTypeDef,
    AddGroupResponse
> = z.union([
    components.UnifiedGroupOutput$outboundSchema,
    z.lazy(() => AddGroupResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddGroupResponse$ {
    /** @deprecated use `AddGroupResponse$inboundSchema` instead. */
    export const inboundSchema = AddGroupResponse$inboundSchema;
    /** @deprecated use `AddGroupResponse$outboundSchema` instead. */
    export const outboundSchema = AddGroupResponse$outboundSchema;
    /** @deprecated use `AddGroupResponse$Outbound` instead. */
    export type Outbound = AddGroupResponse$Outbound;
}
