/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddCommentRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Ticketing software.
     */
    remoteData?: boolean | undefined;
    unifiedCommentInput: components.UnifiedCommentInput;
};

export type AddCommentResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCommentOutput | undefined;
};

export type AddCommentResponse = AddCommentResponseBody | components.UnifiedCommentOutput;

/** @internal */
export const AddCommentRequest$inboundSchema: z.ZodType<AddCommentRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedCommentInput: components.UnifiedCommentInput$inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedCommentInput: "unifiedCommentInput",
            });
        });

/** @internal */
export type AddCommentRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedCommentInput: components.UnifiedCommentInput$Outbound;
};

/** @internal */
export const AddCommentRequest$outboundSchema: z.ZodType<
    AddCommentRequest$Outbound,
    z.ZodTypeDef,
    AddCommentRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedCommentInput: components.UnifiedCommentInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedCommentInput: "UnifiedCommentInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCommentRequest$ {
    /** @deprecated use `AddCommentRequest$inboundSchema` instead. */
    export const inboundSchema = AddCommentRequest$inboundSchema;
    /** @deprecated use `AddCommentRequest$outboundSchema` instead. */
    export const outboundSchema = AddCommentRequest$outboundSchema;
    /** @deprecated use `AddCommentRequest$Outbound` instead. */
    export type Outbound = AddCommentRequest$Outbound;
}

/** @internal */
export const AddCommentResponseBody$inboundSchema: z.ZodType<
    AddCommentResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCommentOutput$inboundSchema.optional(),
});

/** @internal */
export type AddCommentResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCommentOutput$Outbound | undefined;
};

/** @internal */
export const AddCommentResponseBody$outboundSchema: z.ZodType<
    AddCommentResponseBody$Outbound,
    z.ZodTypeDef,
    AddCommentResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCommentOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCommentResponseBody$ {
    /** @deprecated use `AddCommentResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddCommentResponseBody$inboundSchema;
    /** @deprecated use `AddCommentResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddCommentResponseBody$outboundSchema;
    /** @deprecated use `AddCommentResponseBody$Outbound` instead. */
    export type Outbound = AddCommentResponseBody$Outbound;
}

/** @internal */
export const AddCommentResponse$inboundSchema: z.ZodType<
    AddCommentResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => AddCommentResponseBody$inboundSchema),
    components.UnifiedCommentOutput$inboundSchema,
]);

/** @internal */
export type AddCommentResponse$Outbound =
    | AddCommentResponseBody$Outbound
    | components.UnifiedCommentOutput$Outbound;

/** @internal */
export const AddCommentResponse$outboundSchema: z.ZodType<
    AddCommentResponse$Outbound,
    z.ZodTypeDef,
    AddCommentResponse
> = z.union([
    z.lazy(() => AddCommentResponseBody$outboundSchema),
    components.UnifiedCommentOutput$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCommentResponse$ {
    /** @deprecated use `AddCommentResponse$inboundSchema` instead. */
    export const inboundSchema = AddCommentResponse$inboundSchema;
    /** @deprecated use `AddCommentResponse$outboundSchema` instead. */
    export const outboundSchema = AddCommentResponse$outboundSchema;
    /** @deprecated use `AddCommentResponse$Outbound` instead. */
    export type Outbound = AddCommentResponse$Outbound;
}
