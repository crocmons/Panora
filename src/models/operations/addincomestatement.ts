/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddIncomeStatementRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
    unifiedIncomeStatementInput: components.UnifiedIncomeStatementInput;
};

export type AddIncomeStatementResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedIncomeStatementOutput | undefined;
};

export type AddIncomeStatementResponse =
    | components.UnifiedIncomeStatementOutput
    | AddIncomeStatementResponseBody;

/** @internal */
export const AddIncomeStatementRequest$inboundSchema: z.ZodType<
    AddIncomeStatementRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedIncomeStatementInput: components.UnifiedIncomeStatementInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedIncomeStatementInput: "unifiedIncomeStatementInput",
        });
    });

/** @internal */
export type AddIncomeStatementRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedIncomeStatementInput: components.UnifiedIncomeStatementInput$Outbound;
};

/** @internal */
export const AddIncomeStatementRequest$outboundSchema: z.ZodType<
    AddIncomeStatementRequest$Outbound,
    z.ZodTypeDef,
    AddIncomeStatementRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedIncomeStatementInput: components.UnifiedIncomeStatementInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedIncomeStatementInput: "UnifiedIncomeStatementInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddIncomeStatementRequest$ {
    /** @deprecated use `AddIncomeStatementRequest$inboundSchema` instead. */
    export const inboundSchema = AddIncomeStatementRequest$inboundSchema;
    /** @deprecated use `AddIncomeStatementRequest$outboundSchema` instead. */
    export const outboundSchema = AddIncomeStatementRequest$outboundSchema;
    /** @deprecated use `AddIncomeStatementRequest$Outbound` instead. */
    export type Outbound = AddIncomeStatementRequest$Outbound;
}

/** @internal */
export const AddIncomeStatementResponseBody$inboundSchema: z.ZodType<
    AddIncomeStatementResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedIncomeStatementOutput$inboundSchema.optional(),
});

/** @internal */
export type AddIncomeStatementResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedIncomeStatementOutput$Outbound | undefined;
};

/** @internal */
export const AddIncomeStatementResponseBody$outboundSchema: z.ZodType<
    AddIncomeStatementResponseBody$Outbound,
    z.ZodTypeDef,
    AddIncomeStatementResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedIncomeStatementOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddIncomeStatementResponseBody$ {
    /** @deprecated use `AddIncomeStatementResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddIncomeStatementResponseBody$inboundSchema;
    /** @deprecated use `AddIncomeStatementResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddIncomeStatementResponseBody$outboundSchema;
    /** @deprecated use `AddIncomeStatementResponseBody$Outbound` instead. */
    export type Outbound = AddIncomeStatementResponseBody$Outbound;
}

/** @internal */
export const AddIncomeStatementResponse$inboundSchema: z.ZodType<
    AddIncomeStatementResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedIncomeStatementOutput$inboundSchema,
    z.lazy(() => AddIncomeStatementResponseBody$inboundSchema),
]);

/** @internal */
export type AddIncomeStatementResponse$Outbound =
    | components.UnifiedIncomeStatementOutput$Outbound
    | AddIncomeStatementResponseBody$Outbound;

/** @internal */
export const AddIncomeStatementResponse$outboundSchema: z.ZodType<
    AddIncomeStatementResponse$Outbound,
    z.ZodTypeDef,
    AddIncomeStatementResponse
> = z.union([
    components.UnifiedIncomeStatementOutput$outboundSchema,
    z.lazy(() => AddIncomeStatementResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddIncomeStatementResponse$ {
    /** @deprecated use `AddIncomeStatementResponse$inboundSchema` instead. */
    export const inboundSchema = AddIncomeStatementResponse$inboundSchema;
    /** @deprecated use `AddIncomeStatementResponse$outboundSchema` instead. */
    export const outboundSchema = AddIncomeStatementResponse$outboundSchema;
    /** @deprecated use `AddIncomeStatementResponse$Outbound` instead. */
    export type Outbound = AddIncomeStatementResponse$Outbound;
}
