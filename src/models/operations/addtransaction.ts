/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddTransactionRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
    unifiedTransactionInput: components.UnifiedTransactionInput;
};

export type AddTransactionResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedTransactionOutput | undefined;
};

export type AddTransactionResponse =
    | components.UnifiedTransactionOutput
    | AddTransactionResponseBody;

/** @internal */
export const AddTransactionRequest$inboundSchema: z.ZodType<
    AddTransactionRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedTransactionInput: components.UnifiedTransactionInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedTransactionInput: "unifiedTransactionInput",
        });
    });

/** @internal */
export type AddTransactionRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedTransactionInput: components.UnifiedTransactionInput$Outbound;
};

/** @internal */
export const AddTransactionRequest$outboundSchema: z.ZodType<
    AddTransactionRequest$Outbound,
    z.ZodTypeDef,
    AddTransactionRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedTransactionInput: components.UnifiedTransactionInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedTransactionInput: "UnifiedTransactionInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTransactionRequest$ {
    /** @deprecated use `AddTransactionRequest$inboundSchema` instead. */
    export const inboundSchema = AddTransactionRequest$inboundSchema;
    /** @deprecated use `AddTransactionRequest$outboundSchema` instead. */
    export const outboundSchema = AddTransactionRequest$outboundSchema;
    /** @deprecated use `AddTransactionRequest$Outbound` instead. */
    export type Outbound = AddTransactionRequest$Outbound;
}

/** @internal */
export const AddTransactionResponseBody$inboundSchema: z.ZodType<
    AddTransactionResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedTransactionOutput$inboundSchema.optional(),
});

/** @internal */
export type AddTransactionResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedTransactionOutput$Outbound | undefined;
};

/** @internal */
export const AddTransactionResponseBody$outboundSchema: z.ZodType<
    AddTransactionResponseBody$Outbound,
    z.ZodTypeDef,
    AddTransactionResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedTransactionOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTransactionResponseBody$ {
    /** @deprecated use `AddTransactionResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddTransactionResponseBody$inboundSchema;
    /** @deprecated use `AddTransactionResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddTransactionResponseBody$outboundSchema;
    /** @deprecated use `AddTransactionResponseBody$Outbound` instead. */
    export type Outbound = AddTransactionResponseBody$Outbound;
}

/** @internal */
export const AddTransactionResponse$inboundSchema: z.ZodType<
    AddTransactionResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedTransactionOutput$inboundSchema,
    z.lazy(() => AddTransactionResponseBody$inboundSchema),
]);

/** @internal */
export type AddTransactionResponse$Outbound =
    | components.UnifiedTransactionOutput$Outbound
    | AddTransactionResponseBody$Outbound;

/** @internal */
export const AddTransactionResponse$outboundSchema: z.ZodType<
    AddTransactionResponse$Outbound,
    z.ZodTypeDef,
    AddTransactionResponse
> = z.union([
    components.UnifiedTransactionOutput$outboundSchema,
    z.lazy(() => AddTransactionResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTransactionResponse$ {
    /** @deprecated use `AddTransactionResponse$inboundSchema` instead. */
    export const inboundSchema = AddTransactionResponse$inboundSchema;
    /** @deprecated use `AddTransactionResponse$outboundSchema` instead. */
    export const outboundSchema = AddTransactionResponse$outboundSchema;
    /** @deprecated use `AddTransactionResponse$Outbound` instead. */
    export type Outbound = AddTransactionResponse$Outbound;
}
