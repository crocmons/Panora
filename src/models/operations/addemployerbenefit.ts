/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddEmployerBenefitRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Hris software.
     */
    remoteData?: boolean | undefined;
    unifiedEmployerBenefitInput: components.UnifiedEmployerBenefitInput;
};

export type AddEmployerBenefitResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedEmployerBenefitOutput | undefined;
};

export type AddEmployerBenefitResponse =
    | components.UnifiedEmployerBenefitOutput
    | AddEmployerBenefitResponseBody;

/** @internal */
export const AddEmployerBenefitRequest$inboundSchema: z.ZodType<
    AddEmployerBenefitRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedEmployerBenefitInput: components.UnifiedEmployerBenefitInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedEmployerBenefitInput: "unifiedEmployerBenefitInput",
        });
    });

/** @internal */
export type AddEmployerBenefitRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedEmployerBenefitInput: components.UnifiedEmployerBenefitInput$Outbound;
};

/** @internal */
export const AddEmployerBenefitRequest$outboundSchema: z.ZodType<
    AddEmployerBenefitRequest$Outbound,
    z.ZodTypeDef,
    AddEmployerBenefitRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedEmployerBenefitInput: components.UnifiedEmployerBenefitInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedEmployerBenefitInput: "UnifiedEmployerBenefitInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEmployerBenefitRequest$ {
    /** @deprecated use `AddEmployerBenefitRequest$inboundSchema` instead. */
    export const inboundSchema = AddEmployerBenefitRequest$inboundSchema;
    /** @deprecated use `AddEmployerBenefitRequest$outboundSchema` instead. */
    export const outboundSchema = AddEmployerBenefitRequest$outboundSchema;
    /** @deprecated use `AddEmployerBenefitRequest$Outbound` instead. */
    export type Outbound = AddEmployerBenefitRequest$Outbound;
}

/** @internal */
export const AddEmployerBenefitResponseBody$inboundSchema: z.ZodType<
    AddEmployerBenefitResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedEmployerBenefitOutput$inboundSchema.optional(),
});

/** @internal */
export type AddEmployerBenefitResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedEmployerBenefitOutput$Outbound | undefined;
};

/** @internal */
export const AddEmployerBenefitResponseBody$outboundSchema: z.ZodType<
    AddEmployerBenefitResponseBody$Outbound,
    z.ZodTypeDef,
    AddEmployerBenefitResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedEmployerBenefitOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEmployerBenefitResponseBody$ {
    /** @deprecated use `AddEmployerBenefitResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddEmployerBenefitResponseBody$inboundSchema;
    /** @deprecated use `AddEmployerBenefitResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddEmployerBenefitResponseBody$outboundSchema;
    /** @deprecated use `AddEmployerBenefitResponseBody$Outbound` instead. */
    export type Outbound = AddEmployerBenefitResponseBody$Outbound;
}

/** @internal */
export const AddEmployerBenefitResponse$inboundSchema: z.ZodType<
    AddEmployerBenefitResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedEmployerBenefitOutput$inboundSchema,
    z.lazy(() => AddEmployerBenefitResponseBody$inboundSchema),
]);

/** @internal */
export type AddEmployerBenefitResponse$Outbound =
    | components.UnifiedEmployerBenefitOutput$Outbound
    | AddEmployerBenefitResponseBody$Outbound;

/** @internal */
export const AddEmployerBenefitResponse$outboundSchema: z.ZodType<
    AddEmployerBenefitResponse$Outbound,
    z.ZodTypeDef,
    AddEmployerBenefitResponse
> = z.union([
    components.UnifiedEmployerBenefitOutput$outboundSchema,
    z.lazy(() => AddEmployerBenefitResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEmployerBenefitResponse$ {
    /** @deprecated use `AddEmployerBenefitResponse$inboundSchema` instead. */
    export const inboundSchema = AddEmployerBenefitResponse$inboundSchema;
    /** @deprecated use `AddEmployerBenefitResponse$outboundSchema` instead. */
    export const outboundSchema = AddEmployerBenefitResponse$outboundSchema;
    /** @deprecated use `AddEmployerBenefitResponse$Outbound` instead. */
    export type Outbound = AddEmployerBenefitResponse$Outbound;
}
