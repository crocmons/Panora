/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddCrmCompanyRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Crm software.
     */
    remoteData?: boolean | undefined;
    unifiedCompanyInput: components.UnifiedCompanyInput;
};

export type AddCrmCompanyResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCompanyOutput | undefined;
};

export type AddCrmCompanyResponse = components.UnifiedCompanyOutput | AddCrmCompanyResponseBody;

/** @internal */
export const AddCrmCompanyRequest$inboundSchema: z.ZodType<
    AddCrmCompanyRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedCompanyInput: components.UnifiedCompanyInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedCompanyInput: "unifiedCompanyInput",
        });
    });

/** @internal */
export type AddCrmCompanyRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedCompanyInput: components.UnifiedCompanyInput$Outbound;
};

/** @internal */
export const AddCrmCompanyRequest$outboundSchema: z.ZodType<
    AddCrmCompanyRequest$Outbound,
    z.ZodTypeDef,
    AddCrmCompanyRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedCompanyInput: components.UnifiedCompanyInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedCompanyInput: "UnifiedCompanyInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCrmCompanyRequest$ {
    /** @deprecated use `AddCrmCompanyRequest$inboundSchema` instead. */
    export const inboundSchema = AddCrmCompanyRequest$inboundSchema;
    /** @deprecated use `AddCrmCompanyRequest$outboundSchema` instead. */
    export const outboundSchema = AddCrmCompanyRequest$outboundSchema;
    /** @deprecated use `AddCrmCompanyRequest$Outbound` instead. */
    export type Outbound = AddCrmCompanyRequest$Outbound;
}

/** @internal */
export const AddCrmCompanyResponseBody$inboundSchema: z.ZodType<
    AddCrmCompanyResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCompanyOutput$inboundSchema.optional(),
});

/** @internal */
export type AddCrmCompanyResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCompanyOutput$Outbound | undefined;
};

/** @internal */
export const AddCrmCompanyResponseBody$outboundSchema: z.ZodType<
    AddCrmCompanyResponseBody$Outbound,
    z.ZodTypeDef,
    AddCrmCompanyResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCompanyOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCrmCompanyResponseBody$ {
    /** @deprecated use `AddCrmCompanyResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddCrmCompanyResponseBody$inboundSchema;
    /** @deprecated use `AddCrmCompanyResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddCrmCompanyResponseBody$outboundSchema;
    /** @deprecated use `AddCrmCompanyResponseBody$Outbound` instead. */
    export type Outbound = AddCrmCompanyResponseBody$Outbound;
}

/** @internal */
export const AddCrmCompanyResponse$inboundSchema: z.ZodType<
    AddCrmCompanyResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedCompanyOutput$inboundSchema,
    z.lazy(() => AddCrmCompanyResponseBody$inboundSchema),
]);

/** @internal */
export type AddCrmCompanyResponse$Outbound =
    | components.UnifiedCompanyOutput$Outbound
    | AddCrmCompanyResponseBody$Outbound;

/** @internal */
export const AddCrmCompanyResponse$outboundSchema: z.ZodType<
    AddCrmCompanyResponse$Outbound,
    z.ZodTypeDef,
    AddCrmCompanyResponse
> = z.union([
    components.UnifiedCompanyOutput$outboundSchema,
    z.lazy(() => AddCrmCompanyResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCrmCompanyResponse$ {
    /** @deprecated use `AddCrmCompanyResponse$inboundSchema` instead. */
    export const inboundSchema = AddCrmCompanyResponse$inboundSchema;
    /** @deprecated use `AddCrmCompanyResponse$outboundSchema` instead. */
    export const outboundSchema = AddCrmCompanyResponse$outboundSchema;
    /** @deprecated use `AddCrmCompanyResponse$Outbound` instead. */
    export type Outbound = AddCrmCompanyResponse$Outbound;
}
