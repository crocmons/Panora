/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddCompanyInfoRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
    unifiedCompanyInfoInput: components.UnifiedCompanyInfoInput;
};

export type AddCompanyInfoResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCompanyInfoOutput | undefined;
};

export type AddCompanyInfoResponse =
    | components.UnifiedCompanyInfoOutput
    | AddCompanyInfoResponseBody;

/** @internal */
export const AddCompanyInfoRequest$inboundSchema: z.ZodType<
    AddCompanyInfoRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedCompanyInfoInput: components.UnifiedCompanyInfoInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedCompanyInfoInput: "unifiedCompanyInfoInput",
        });
    });

/** @internal */
export type AddCompanyInfoRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedCompanyInfoInput: components.UnifiedCompanyInfoInput$Outbound;
};

/** @internal */
export const AddCompanyInfoRequest$outboundSchema: z.ZodType<
    AddCompanyInfoRequest$Outbound,
    z.ZodTypeDef,
    AddCompanyInfoRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedCompanyInfoInput: components.UnifiedCompanyInfoInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedCompanyInfoInput: "UnifiedCompanyInfoInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCompanyInfoRequest$ {
    /** @deprecated use `AddCompanyInfoRequest$inboundSchema` instead. */
    export const inboundSchema = AddCompanyInfoRequest$inboundSchema;
    /** @deprecated use `AddCompanyInfoRequest$outboundSchema` instead. */
    export const outboundSchema = AddCompanyInfoRequest$outboundSchema;
    /** @deprecated use `AddCompanyInfoRequest$Outbound` instead. */
    export type Outbound = AddCompanyInfoRequest$Outbound;
}

/** @internal */
export const AddCompanyInfoResponseBody$inboundSchema: z.ZodType<
    AddCompanyInfoResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCompanyInfoOutput$inboundSchema.optional(),
});

/** @internal */
export type AddCompanyInfoResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCompanyInfoOutput$Outbound | undefined;
};

/** @internal */
export const AddCompanyInfoResponseBody$outboundSchema: z.ZodType<
    AddCompanyInfoResponseBody$Outbound,
    z.ZodTypeDef,
    AddCompanyInfoResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCompanyInfoOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCompanyInfoResponseBody$ {
    /** @deprecated use `AddCompanyInfoResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddCompanyInfoResponseBody$inboundSchema;
    /** @deprecated use `AddCompanyInfoResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddCompanyInfoResponseBody$outboundSchema;
    /** @deprecated use `AddCompanyInfoResponseBody$Outbound` instead. */
    export type Outbound = AddCompanyInfoResponseBody$Outbound;
}

/** @internal */
export const AddCompanyInfoResponse$inboundSchema: z.ZodType<
    AddCompanyInfoResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedCompanyInfoOutput$inboundSchema,
    z.lazy(() => AddCompanyInfoResponseBody$inboundSchema),
]);

/** @internal */
export type AddCompanyInfoResponse$Outbound =
    | components.UnifiedCompanyInfoOutput$Outbound
    | AddCompanyInfoResponseBody$Outbound;

/** @internal */
export const AddCompanyInfoResponse$outboundSchema: z.ZodType<
    AddCompanyInfoResponse$Outbound,
    z.ZodTypeDef,
    AddCompanyInfoResponse
> = z.union([
    components.UnifiedCompanyInfoOutput$outboundSchema,
    z.lazy(() => AddCompanyInfoResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCompanyInfoResponse$ {
    /** @deprecated use `AddCompanyInfoResponse$inboundSchema` instead. */
    export const inboundSchema = AddCompanyInfoResponse$inboundSchema;
    /** @deprecated use `AddCompanyInfoResponse$outboundSchema` instead. */
    export const outboundSchema = AddCompanyInfoResponse$outboundSchema;
    /** @deprecated use `AddCompanyInfoResponse$Outbound` instead. */
    export type Outbound = AddCompanyInfoResponse$Outbound;
}
