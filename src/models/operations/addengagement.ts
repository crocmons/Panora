/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddEngagementRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Crm software.
     */
    remoteData?: boolean | undefined;
    unifiedEngagementInput: components.UnifiedEngagementInput;
};

export type AddEngagementResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedEngagementOutput | undefined;
};

export type AddEngagementResponse = AddEngagementResponseBody | components.UnifiedEngagementOutput;

/** @internal */
export const AddEngagementRequest$inboundSchema: z.ZodType<
    AddEngagementRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedEngagementInput: components.UnifiedEngagementInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedEngagementInput: "unifiedEngagementInput",
        });
    });

/** @internal */
export type AddEngagementRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedEngagementInput: components.UnifiedEngagementInput$Outbound;
};

/** @internal */
export const AddEngagementRequest$outboundSchema: z.ZodType<
    AddEngagementRequest$Outbound,
    z.ZodTypeDef,
    AddEngagementRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedEngagementInput: components.UnifiedEngagementInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedEngagementInput: "UnifiedEngagementInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEngagementRequest$ {
    /** @deprecated use `AddEngagementRequest$inboundSchema` instead. */
    export const inboundSchema = AddEngagementRequest$inboundSchema;
    /** @deprecated use `AddEngagementRequest$outboundSchema` instead. */
    export const outboundSchema = AddEngagementRequest$outboundSchema;
    /** @deprecated use `AddEngagementRequest$Outbound` instead. */
    export type Outbound = AddEngagementRequest$Outbound;
}

/** @internal */
export const AddEngagementResponseBody$inboundSchema: z.ZodType<
    AddEngagementResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedEngagementOutput$inboundSchema.optional(),
});

/** @internal */
export type AddEngagementResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedEngagementOutput$Outbound | undefined;
};

/** @internal */
export const AddEngagementResponseBody$outboundSchema: z.ZodType<
    AddEngagementResponseBody$Outbound,
    z.ZodTypeDef,
    AddEngagementResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedEngagementOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEngagementResponseBody$ {
    /** @deprecated use `AddEngagementResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddEngagementResponseBody$inboundSchema;
    /** @deprecated use `AddEngagementResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddEngagementResponseBody$outboundSchema;
    /** @deprecated use `AddEngagementResponseBody$Outbound` instead. */
    export type Outbound = AddEngagementResponseBody$Outbound;
}

/** @internal */
export const AddEngagementResponse$inboundSchema: z.ZodType<
    AddEngagementResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => AddEngagementResponseBody$inboundSchema),
    components.UnifiedEngagementOutput$inboundSchema,
]);

/** @internal */
export type AddEngagementResponse$Outbound =
    | AddEngagementResponseBody$Outbound
    | components.UnifiedEngagementOutput$Outbound;

/** @internal */
export const AddEngagementResponse$outboundSchema: z.ZodType<
    AddEngagementResponse$Outbound,
    z.ZodTypeDef,
    AddEngagementResponse
> = z.union([
    z.lazy(() => AddEngagementResponseBody$outboundSchema),
    components.UnifiedEngagementOutput$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEngagementResponse$ {
    /** @deprecated use `AddEngagementResponse$inboundSchema` instead. */
    export const inboundSchema = AddEngagementResponse$inboundSchema;
    /** @deprecated use `AddEngagementResponse$outboundSchema` instead. */
    export const outboundSchema = AddEngagementResponse$outboundSchema;
    /** @deprecated use `AddEngagementResponse$Outbound` instead. */
    export type Outbound = AddEngagementResponse$Outbound;
}
