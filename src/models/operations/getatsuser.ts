/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GetAtsUserRequest = {
    /**
     * id of the user you want to retrieve.
     */
    id: string;
    /**
     * Set to true to include data from the original Ats software.
     */
    remoteData?: boolean | undefined;
};

export type GetAtsUserResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedUserOutput | undefined;
};

/** @internal */
export const GetAtsUserRequest$inboundSchema: z.ZodType<GetAtsUserRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            id: z.string(),
            remote_data: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                remote_data: "remoteData",
            });
        });

/** @internal */
export type GetAtsUserRequest$Outbound = {
    id: string;
    remote_data?: boolean | undefined;
};

/** @internal */
export const GetAtsUserRequest$outboundSchema: z.ZodType<
    GetAtsUserRequest$Outbound,
    z.ZodTypeDef,
    GetAtsUserRequest
> = z
    .object({
        id: z.string(),
        remoteData: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAtsUserRequest$ {
    /** @deprecated use `GetAtsUserRequest$inboundSchema` instead. */
    export const inboundSchema = GetAtsUserRequest$inboundSchema;
    /** @deprecated use `GetAtsUserRequest$outboundSchema` instead. */
    export const outboundSchema = GetAtsUserRequest$outboundSchema;
    /** @deprecated use `GetAtsUserRequest$Outbound` instead. */
    export type Outbound = GetAtsUserRequest$Outbound;
}

/** @internal */
export const GetAtsUserResponseBody$inboundSchema: z.ZodType<
    GetAtsUserResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedUserOutput$inboundSchema.optional(),
});

/** @internal */
export type GetAtsUserResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedUserOutput$Outbound | undefined;
};

/** @internal */
export const GetAtsUserResponseBody$outboundSchema: z.ZodType<
    GetAtsUserResponseBody$Outbound,
    z.ZodTypeDef,
    GetAtsUserResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedUserOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAtsUserResponseBody$ {
    /** @deprecated use `GetAtsUserResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetAtsUserResponseBody$inboundSchema;
    /** @deprecated use `GetAtsUserResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetAtsUserResponseBody$outboundSchema;
    /** @deprecated use `GetAtsUserResponseBody$Outbound` instead. */
    export type Outbound = GetAtsUserResponseBody$Outbound;
}
