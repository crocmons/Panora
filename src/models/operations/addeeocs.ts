/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddEeocsRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Ats software.
     */
    remoteData?: boolean | undefined;
    unifiedEeocsInput: components.UnifiedEeocsInput;
};

export type AddEeocsResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedEeocsOutput | undefined;
};

export type AddEeocsResponse = components.UnifiedEeocsOutput | AddEeocsResponseBody;

/** @internal */
export const AddEeocsRequest$inboundSchema: z.ZodType<AddEeocsRequest, z.ZodTypeDef, unknown> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedEeocsInput: components.UnifiedEeocsInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedEeocsInput: "unifiedEeocsInput",
        });
    });

/** @internal */
export type AddEeocsRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedEeocsInput: components.UnifiedEeocsInput$Outbound;
};

/** @internal */
export const AddEeocsRequest$outboundSchema: z.ZodType<
    AddEeocsRequest$Outbound,
    z.ZodTypeDef,
    AddEeocsRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedEeocsInput: components.UnifiedEeocsInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedEeocsInput: "UnifiedEeocsInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEeocsRequest$ {
    /** @deprecated use `AddEeocsRequest$inboundSchema` instead. */
    export const inboundSchema = AddEeocsRequest$inboundSchema;
    /** @deprecated use `AddEeocsRequest$outboundSchema` instead. */
    export const outboundSchema = AddEeocsRequest$outboundSchema;
    /** @deprecated use `AddEeocsRequest$Outbound` instead. */
    export type Outbound = AddEeocsRequest$Outbound;
}

/** @internal */
export const AddEeocsResponseBody$inboundSchema: z.ZodType<
    AddEeocsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedEeocsOutput$inboundSchema.optional(),
});

/** @internal */
export type AddEeocsResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedEeocsOutput$Outbound | undefined;
};

/** @internal */
export const AddEeocsResponseBody$outboundSchema: z.ZodType<
    AddEeocsResponseBody$Outbound,
    z.ZodTypeDef,
    AddEeocsResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedEeocsOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEeocsResponseBody$ {
    /** @deprecated use `AddEeocsResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddEeocsResponseBody$inboundSchema;
    /** @deprecated use `AddEeocsResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddEeocsResponseBody$outboundSchema;
    /** @deprecated use `AddEeocsResponseBody$Outbound` instead. */
    export type Outbound = AddEeocsResponseBody$Outbound;
}

/** @internal */
export const AddEeocsResponse$inboundSchema: z.ZodType<AddEeocsResponse, z.ZodTypeDef, unknown> =
    z.union([
        components.UnifiedEeocsOutput$inboundSchema,
        z.lazy(() => AddEeocsResponseBody$inboundSchema),
    ]);

/** @internal */
export type AddEeocsResponse$Outbound =
    | components.UnifiedEeocsOutput$Outbound
    | AddEeocsResponseBody$Outbound;

/** @internal */
export const AddEeocsResponse$outboundSchema: z.ZodType<
    AddEeocsResponse$Outbound,
    z.ZodTypeDef,
    AddEeocsResponse
> = z.union([
    components.UnifiedEeocsOutput$outboundSchema,
    z.lazy(() => AddEeocsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEeocsResponse$ {
    /** @deprecated use `AddEeocsResponse$inboundSchema` instead. */
    export const inboundSchema = AddEeocsResponse$inboundSchema;
    /** @deprecated use `AddEeocsResponse$outboundSchema` instead. */
    export const outboundSchema = AddEeocsResponse$outboundSchema;
    /** @deprecated use `AddEeocsResponse$Outbound` instead. */
    export type Outbound = AddEeocsResponse$Outbound;
}
