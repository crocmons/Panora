/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GetCrmUserRequest = {
    /**
     * id of the user you want to retrieve.
     */
    id: string;
    /**
     * Set to true to include data from the original Crm software.
     */
    remoteData?: boolean | undefined;
};

export type GetCrmUserResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedUserOutput | undefined;
};

/** @internal */
export const GetCrmUserRequest$inboundSchema: z.ZodType<GetCrmUserRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            id: z.string(),
            remote_data: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                remote_data: "remoteData",
            });
        });

/** @internal */
export type GetCrmUserRequest$Outbound = {
    id: string;
    remote_data?: boolean | undefined;
};

/** @internal */
export const GetCrmUserRequest$outboundSchema: z.ZodType<
    GetCrmUserRequest$Outbound,
    z.ZodTypeDef,
    GetCrmUserRequest
> = z
    .object({
        id: z.string(),
        remoteData: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCrmUserRequest$ {
    /** @deprecated use `GetCrmUserRequest$inboundSchema` instead. */
    export const inboundSchema = GetCrmUserRequest$inboundSchema;
    /** @deprecated use `GetCrmUserRequest$outboundSchema` instead. */
    export const outboundSchema = GetCrmUserRequest$outboundSchema;
    /** @deprecated use `GetCrmUserRequest$Outbound` instead. */
    export type Outbound = GetCrmUserRequest$Outbound;
}

/** @internal */
export const GetCrmUserResponseBody$inboundSchema: z.ZodType<
    GetCrmUserResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedUserOutput$inboundSchema.optional(),
});

/** @internal */
export type GetCrmUserResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedUserOutput$Outbound | undefined;
};

/** @internal */
export const GetCrmUserResponseBody$outboundSchema: z.ZodType<
    GetCrmUserResponseBody$Outbound,
    z.ZodTypeDef,
    GetCrmUserResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedUserOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCrmUserResponseBody$ {
    /** @deprecated use `GetCrmUserResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetCrmUserResponseBody$inboundSchema;
    /** @deprecated use `GetCrmUserResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetCrmUserResponseBody$outboundSchema;
    /** @deprecated use `GetCrmUserResponseBody$Outbound` instead. */
    export type Outbound = GetCrmUserResponseBody$Outbound;
}
