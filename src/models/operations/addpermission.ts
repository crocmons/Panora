/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddPermissionRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Filestorage software.
     */
    remoteData?: boolean | undefined;
    unifiedPermissionInput: components.UnifiedPermissionInput;
};

export type AddPermissionResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedPermissionOutput | undefined;
};

export type AddPermissionResponse = components.UnifiedPermissionOutput | AddPermissionResponseBody;

/** @internal */
export const AddPermissionRequest$inboundSchema: z.ZodType<
    AddPermissionRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedPermissionInput: components.UnifiedPermissionInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedPermissionInput: "unifiedPermissionInput",
        });
    });

/** @internal */
export type AddPermissionRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedPermissionInput: components.UnifiedPermissionInput$Outbound;
};

/** @internal */
export const AddPermissionRequest$outboundSchema: z.ZodType<
    AddPermissionRequest$Outbound,
    z.ZodTypeDef,
    AddPermissionRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedPermissionInput: components.UnifiedPermissionInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedPermissionInput: "UnifiedPermissionInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddPermissionRequest$ {
    /** @deprecated use `AddPermissionRequest$inboundSchema` instead. */
    export const inboundSchema = AddPermissionRequest$inboundSchema;
    /** @deprecated use `AddPermissionRequest$outboundSchema` instead. */
    export const outboundSchema = AddPermissionRequest$outboundSchema;
    /** @deprecated use `AddPermissionRequest$Outbound` instead. */
    export type Outbound = AddPermissionRequest$Outbound;
}

/** @internal */
export const AddPermissionResponseBody$inboundSchema: z.ZodType<
    AddPermissionResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedPermissionOutput$inboundSchema.optional(),
});

/** @internal */
export type AddPermissionResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedPermissionOutput$Outbound | undefined;
};

/** @internal */
export const AddPermissionResponseBody$outboundSchema: z.ZodType<
    AddPermissionResponseBody$Outbound,
    z.ZodTypeDef,
    AddPermissionResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedPermissionOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddPermissionResponseBody$ {
    /** @deprecated use `AddPermissionResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddPermissionResponseBody$inboundSchema;
    /** @deprecated use `AddPermissionResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddPermissionResponseBody$outboundSchema;
    /** @deprecated use `AddPermissionResponseBody$Outbound` instead. */
    export type Outbound = AddPermissionResponseBody$Outbound;
}

/** @internal */
export const AddPermissionResponse$inboundSchema: z.ZodType<
    AddPermissionResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedPermissionOutput$inboundSchema,
    z.lazy(() => AddPermissionResponseBody$inboundSchema),
]);

/** @internal */
export type AddPermissionResponse$Outbound =
    | components.UnifiedPermissionOutput$Outbound
    | AddPermissionResponseBody$Outbound;

/** @internal */
export const AddPermissionResponse$outboundSchema: z.ZodType<
    AddPermissionResponse$Outbound,
    z.ZodTypeDef,
    AddPermissionResponse
> = z.union([
    components.UnifiedPermissionOutput$outboundSchema,
    z.lazy(() => AddPermissionResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddPermissionResponse$ {
    /** @deprecated use `AddPermissionResponse$inboundSchema` instead. */
    export const inboundSchema = AddPermissionResponse$inboundSchema;
    /** @deprecated use `AddPermissionResponse$outboundSchema` instead. */
    export const outboundSchema = AddPermissionResponse$outboundSchema;
    /** @deprecated use `AddPermissionResponse$Outbound` instead. */
    export type Outbound = AddPermissionResponse$Outbound;
}
