/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GetCompanyInfoRequest = {
    /**
     * id of the companyinfo you want to retrieve.
     */
    id: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
};

export type GetCompanyInfoResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCompanyInfoOutput | undefined;
};

/** @internal */
export const GetCompanyInfoRequest$inboundSchema: z.ZodType<
    GetCompanyInfoRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string(),
        remote_data: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remote_data: "remoteData",
        });
    });

/** @internal */
export type GetCompanyInfoRequest$Outbound = {
    id: string;
    remote_data?: boolean | undefined;
};

/** @internal */
export const GetCompanyInfoRequest$outboundSchema: z.ZodType<
    GetCompanyInfoRequest$Outbound,
    z.ZodTypeDef,
    GetCompanyInfoRequest
> = z
    .object({
        id: z.string(),
        remoteData: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyInfoRequest$ {
    /** @deprecated use `GetCompanyInfoRequest$inboundSchema` instead. */
    export const inboundSchema = GetCompanyInfoRequest$inboundSchema;
    /** @deprecated use `GetCompanyInfoRequest$outboundSchema` instead. */
    export const outboundSchema = GetCompanyInfoRequest$outboundSchema;
    /** @deprecated use `GetCompanyInfoRequest$Outbound` instead. */
    export type Outbound = GetCompanyInfoRequest$Outbound;
}

/** @internal */
export const GetCompanyInfoResponseBody$inboundSchema: z.ZodType<
    GetCompanyInfoResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCompanyInfoOutput$inboundSchema.optional(),
});

/** @internal */
export type GetCompanyInfoResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCompanyInfoOutput$Outbound | undefined;
};

/** @internal */
export const GetCompanyInfoResponseBody$outboundSchema: z.ZodType<
    GetCompanyInfoResponseBody$Outbound,
    z.ZodTypeDef,
    GetCompanyInfoResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCompanyInfoOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyInfoResponseBody$ {
    /** @deprecated use `GetCompanyInfoResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetCompanyInfoResponseBody$inboundSchema;
    /** @deprecated use `GetCompanyInfoResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetCompanyInfoResponseBody$outboundSchema;
    /** @deprecated use `GetCompanyInfoResponseBody$Outbound` instead. */
    export type Outbound = GetCompanyInfoResponseBody$Outbound;
}
