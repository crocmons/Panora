/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GetCommentRequest = {
    /**
     * id of the `comment` you want to retrive.
     */
    id: string;
    /**
     * Set to true to include data from the original Ticketing software.
     */
    remoteData?: boolean | undefined;
};

export type GetCommentResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCommentOutput | undefined;
};

/** @internal */
export const GetCommentRequest$inboundSchema: z.ZodType<GetCommentRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            id: z.string(),
            remote_data: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                remote_data: "remoteData",
            });
        });

/** @internal */
export type GetCommentRequest$Outbound = {
    id: string;
    remote_data?: boolean | undefined;
};

/** @internal */
export const GetCommentRequest$outboundSchema: z.ZodType<
    GetCommentRequest$Outbound,
    z.ZodTypeDef,
    GetCommentRequest
> = z
    .object({
        id: z.string(),
        remoteData: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCommentRequest$ {
    /** @deprecated use `GetCommentRequest$inboundSchema` instead. */
    export const inboundSchema = GetCommentRequest$inboundSchema;
    /** @deprecated use `GetCommentRequest$outboundSchema` instead. */
    export const outboundSchema = GetCommentRequest$outboundSchema;
    /** @deprecated use `GetCommentRequest$Outbound` instead. */
    export type Outbound = GetCommentRequest$Outbound;
}

/** @internal */
export const GetCommentResponseBody$inboundSchema: z.ZodType<
    GetCommentResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCommentOutput$inboundSchema.optional(),
});

/** @internal */
export type GetCommentResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedCommentOutput$Outbound | undefined;
};

/** @internal */
export const GetCommentResponseBody$outboundSchema: z.ZodType<
    GetCommentResponseBody$Outbound,
    z.ZodTypeDef,
    GetCommentResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedCommentOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCommentResponseBody$ {
    /** @deprecated use `GetCommentResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetCommentResponseBody$inboundSchema;
    /** @deprecated use `GetCommentResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetCommentResponseBody$outboundSchema;
    /** @deprecated use `GetCommentResponseBody$Outbound` instead. */
    export type Outbound = GetCommentResponseBody$Outbound;
}
