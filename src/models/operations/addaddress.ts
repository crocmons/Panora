/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddAddressRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
    unifiedAddressInput: components.UnifiedAddressInput;
};

export type AddAddressResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedAddressOutput | undefined;
};

export type AddAddressResponse = components.UnifiedAddressOutput | AddAddressResponseBody;

/** @internal */
export const AddAddressRequest$inboundSchema: z.ZodType<AddAddressRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedAddressInput: components.UnifiedAddressInput$inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedAddressInput: "unifiedAddressInput",
            });
        });

/** @internal */
export type AddAddressRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedAddressInput: components.UnifiedAddressInput$Outbound;
};

/** @internal */
export const AddAddressRequest$outboundSchema: z.ZodType<
    AddAddressRequest$Outbound,
    z.ZodTypeDef,
    AddAddressRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedAddressInput: components.UnifiedAddressInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedAddressInput: "UnifiedAddressInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddAddressRequest$ {
    /** @deprecated use `AddAddressRequest$inboundSchema` instead. */
    export const inboundSchema = AddAddressRequest$inboundSchema;
    /** @deprecated use `AddAddressRequest$outboundSchema` instead. */
    export const outboundSchema = AddAddressRequest$outboundSchema;
    /** @deprecated use `AddAddressRequest$Outbound` instead. */
    export type Outbound = AddAddressRequest$Outbound;
}

/** @internal */
export const AddAddressResponseBody$inboundSchema: z.ZodType<
    AddAddressResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedAddressOutput$inboundSchema.optional(),
});

/** @internal */
export type AddAddressResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedAddressOutput$Outbound | undefined;
};

/** @internal */
export const AddAddressResponseBody$outboundSchema: z.ZodType<
    AddAddressResponseBody$Outbound,
    z.ZodTypeDef,
    AddAddressResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedAddressOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddAddressResponseBody$ {
    /** @deprecated use `AddAddressResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddAddressResponseBody$inboundSchema;
    /** @deprecated use `AddAddressResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddAddressResponseBody$outboundSchema;
    /** @deprecated use `AddAddressResponseBody$Outbound` instead. */
    export type Outbound = AddAddressResponseBody$Outbound;
}

/** @internal */
export const AddAddressResponse$inboundSchema: z.ZodType<
    AddAddressResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.UnifiedAddressOutput$inboundSchema,
    z.lazy(() => AddAddressResponseBody$inboundSchema),
]);

/** @internal */
export type AddAddressResponse$Outbound =
    | components.UnifiedAddressOutput$Outbound
    | AddAddressResponseBody$Outbound;

/** @internal */
export const AddAddressResponse$outboundSchema: z.ZodType<
    AddAddressResponse$Outbound,
    z.ZodTypeDef,
    AddAddressResponse
> = z.union([
    components.UnifiedAddressOutput$outboundSchema,
    z.lazy(() => AddAddressResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddAddressResponse$ {
    /** @deprecated use `AddAddressResponse$inboundSchema` instead. */
    export const inboundSchema = AddAddressResponse$inboundSchema;
    /** @deprecated use `AddAddressResponse$outboundSchema` instead. */
    export const outboundSchema = AddAddressResponse$outboundSchema;
    /** @deprecated use `AddAddressResponse$Outbound` instead. */
    export type Outbound = AddAddressResponse$Outbound;
}
