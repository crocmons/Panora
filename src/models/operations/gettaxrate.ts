/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GetTaxRateRequest = {
    /**
     * id of the taxrate you want to retrieve.
     */
    id: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
};

export type GetTaxRateResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedTaxRateOutput | undefined;
};

/** @internal */
export const GetTaxRateRequest$inboundSchema: z.ZodType<GetTaxRateRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            id: z.string(),
            remote_data: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                remote_data: "remoteData",
            });
        });

/** @internal */
export type GetTaxRateRequest$Outbound = {
    id: string;
    remote_data?: boolean | undefined;
};

/** @internal */
export const GetTaxRateRequest$outboundSchema: z.ZodType<
    GetTaxRateRequest$Outbound,
    z.ZodTypeDef,
    GetTaxRateRequest
> = z
    .object({
        id: z.string(),
        remoteData: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTaxRateRequest$ {
    /** @deprecated use `GetTaxRateRequest$inboundSchema` instead. */
    export const inboundSchema = GetTaxRateRequest$inboundSchema;
    /** @deprecated use `GetTaxRateRequest$outboundSchema` instead. */
    export const outboundSchema = GetTaxRateRequest$outboundSchema;
    /** @deprecated use `GetTaxRateRequest$Outbound` instead. */
    export type Outbound = GetTaxRateRequest$Outbound;
}

/** @internal */
export const GetTaxRateResponseBody$inboundSchema: z.ZodType<
    GetTaxRateResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedTaxRateOutput$inboundSchema.optional(),
});

/** @internal */
export type GetTaxRateResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedTaxRateOutput$Outbound | undefined;
};

/** @internal */
export const GetTaxRateResponseBody$outboundSchema: z.ZodType<
    GetTaxRateResponseBody$Outbound,
    z.ZodTypeDef,
    GetTaxRateResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedTaxRateOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTaxRateResponseBody$ {
    /** @deprecated use `GetTaxRateResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetTaxRateResponseBody$inboundSchema;
    /** @deprecated use `GetTaxRateResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetTaxRateResponseBody$outboundSchema;
    /** @deprecated use `GetTaxRateResponseBody$Outbound` instead. */
    export type Outbound = GetTaxRateResponseBody$Outbound;
}
