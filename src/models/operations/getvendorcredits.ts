/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GetVendorCreditsRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
};

export type GetVendorCreditsResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedVendorCreditOutput | undefined;
};

/** @internal */
export const GetVendorCreditsRequest$inboundSchema: z.ZodType<
    GetVendorCreditsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
        });
    });

/** @internal */
export type GetVendorCreditsRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
};

/** @internal */
export const GetVendorCreditsRequest$outboundSchema: z.ZodType<
    GetVendorCreditsRequest$Outbound,
    z.ZodTypeDef,
    GetVendorCreditsRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVendorCreditsRequest$ {
    /** @deprecated use `GetVendorCreditsRequest$inboundSchema` instead. */
    export const inboundSchema = GetVendorCreditsRequest$inboundSchema;
    /** @deprecated use `GetVendorCreditsRequest$outboundSchema` instead. */
    export const outboundSchema = GetVendorCreditsRequest$outboundSchema;
    /** @deprecated use `GetVendorCreditsRequest$Outbound` instead. */
    export type Outbound = GetVendorCreditsRequest$Outbound;
}

/** @internal */
export const GetVendorCreditsResponseBody$inboundSchema: z.ZodType<
    GetVendorCreditsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedVendorCreditOutput$inboundSchema.optional(),
});

/** @internal */
export type GetVendorCreditsResponseBody$Outbound = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedVendorCreditOutput$Outbound | undefined;
};

/** @internal */
export const GetVendorCreditsResponseBody$outboundSchema: z.ZodType<
    GetVendorCreditsResponseBody$Outbound,
    z.ZodTypeDef,
    GetVendorCreditsResponseBody
> = z.object({
    message: z.string().optional(),
    error: z.string().optional(),
    statusCode: z.number(),
    data: components.UnifiedVendorCreditOutput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVendorCreditsResponseBody$ {
    /** @deprecated use `GetVendorCreditsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetVendorCreditsResponseBody$inboundSchema;
    /** @deprecated use `GetVendorCreditsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetVendorCreditsResponseBody$outboundSchema;
    /** @deprecated use `GetVendorCreditsResponseBody$Outbound` instead. */
    export type Outbound = GetVendorCreditsResponseBody$Outbound;
}
